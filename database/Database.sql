-- MySQL dump 10.13  Distrib 8.0.34, for Linux (x86_64)
--
-- Host: 127.0.0.1    Database: ADDM4RIOTA
-- ------------------------------------------------------
-- Server version	8.0.31

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Current Database: `ADDM4RIOTA`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `ADDM4RIOTA` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;

USE `ADDM4RIOTA`;

--
-- Table structure for table `BRIDGE_iot_critical_object_threat_type`
--

DROP TABLE IF EXISTS `BRIDGE_iot_critical_object_threat_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `BRIDGE_iot_critical_object_threat_type` (
  `ICO_acronym` varchar(255) NOT NULL,
  `TT_id` varchar(255) NOT NULL,
  PRIMARY KEY (`ICO_acronym`,`TT_id`),
  KEY `TT_id` (`TT_id`),
  CONSTRAINT `BRIDGE_iot_critical_object_threat_type_ibfk_1` FOREIGN KEY (`ICO_acronym`) REFERENCES `iot_critical_object` (`acronym`),
  CONSTRAINT `BRIDGE_iot_critical_object_threat_type_ibfk_2` FOREIGN KEY (`TT_id`) REFERENCES `threat_type` (`iot_threat_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `BRIDGE_iot_critical_object_threat_type`
--

LOCK TABLES `BRIDGE_iot_critical_object_threat_type` WRITE;
/*!40000 ALTER TABLE `BRIDGE_iot_critical_object_threat_type` DISABLE KEYS */;
INSERT INTO `BRIDGE_iot_critical_object_threat_type` VALUES ('ODRSC','ALTT1'),('RSC','ALTT1'),('SVC','ALTT1'),('DVC','ALTT2'),('ADA','ALTT3'),('NRSC','ALTT3'),('ODRSC','ALTT3'),('RSC','ALTT3'),('SVC','ALTT3'),('DVC','ALTT4'),('DVC','ALTT5'),('RSC','ALTT5'),('ADA','ALTT6'),('NRSC','ALTT6'),('ODRSC','ALTT6'),('RSC','ALTT6'),('SVC','ALTT6'),('ADA','ALTT7'),('NRSC','ALTT7'),('ODRSC','ALTT7'),('RSC','ALTT7'),('SVC','ALTT7'),('ODRSC','ALTT8'),('RSC','ALTT8'),('SVC','ALTT8'),('ADA','ALTT9'),('ODRSC','ALTT9'),('RSC','ALTT9'),('SVC','ALTT9'),('ATT','HTT1'),('DVC','HTT1'),('SSR','HTT1'),('TAG','HTT1'),('ATT','HTT10'),('DVC','HTT10'),('SSR','HTT10'),('TAG','HTT10'),('ATT','HTT2'),('DVC','HTT2'),('SSR','HTT2'),('TAG','HTT2'),('ATT','HTT3'),('DVC','HTT3'),('SSR','HTT3'),('TAG','HTT3'),('ATT','HTT4'),('DVC','HTT4'),('SSR','HTT4'),('TAG','HTT4'),('ATT','HTT5'),('DVC','HTT5'),('SSR','HTT5'),('TAG','HTT5'),('ATT','HTT6'),('DVC','HTT6'),('SSR','HTT6'),('TAG','HTT6'),('ATT','HTT7'),('DVC','HTT7'),('SSR','HTT7'),('TAG','HTT7'),('ATT','HTT8'),('DVC','HTT8'),('SSR','HTT8'),('TAG','HTT8'),('ATT','HTT9'),('DVC','HTT9'),('SSR','HTT9'),('TAG','HTT9'),('ATT','NLTT1'),('DVC','NLTT1'),('ODRSC','NLTT1'),('RSC','NLTT1'),('SSR','NLTT1'),('TAG','NLTT1'),('ATT','NLTT10'),('DVC','NLTT10'),('ODRSC','NLTT10'),('RSC','NLTT10'),('SSR','NLTT10'),('TAG','NLTT10'),('ATT','NLTT11'),('DVC','NLTT11'),('ODRSC','NLTT11'),('RSC','NLTT11'),('SSR','NLTT11'),('TAG','NLTT11'),('ATT','NLTT12'),('DVC','NLTT12'),('ODRSC','NLTT12'),('RSC','NLTT12'),('SSR','NLTT12'),('TAG','NLTT12'),('ATT','NLTT13'),('DVC','NLTT13'),('ODRSC','NLTT13'),('RSC','NLTT13'),('SSR','NLTT13'),('TAG','NLTT13'),('ATT','NLTT14'),('DVC','NLTT14'),('ODRSC','NLTT14'),('RSC','NLTT14'),('SSR','NLTT14'),('TAG','NLTT14'),('DVC','NLTT15'),('RSC','NLTT15'),('ATT','NLTT16'),('DVC','NLTT16'),('ODRSC','NLTT16'),('RSC','NLTT16'),('SSR','NLTT16'),('TAG','NLTT16'),('ATT','NLTT17'),('DVC','NLTT17'),('ODRSC','NLTT17'),('RSC','NLTT17'),('SSR','NLTT17'),('TAG','NLTT17'),('ATT','NLTT18'),('DVC','NLTT18'),('ODRSC','NLTT18'),('RSC','NLTT18'),('SSR','NLTT18'),('TAG','NLTT18'),('ATT','NLTT19'),('DVC','NLTT19'),('ODRSC','NLTT19'),('RSC','NLTT19'),('SSR','NLTT19'),('TAG','NLTT19'),('ATT','NLTT2'),('DVC','NLTT2'),('ODRSC','NLTT2'),('RSC','NLTT2'),('SSR','NLTT2'),('TAG','NLTT2'),('ATT','NLTT20'),('DVC','NLTT20'),('ODRSC','NLTT20'),('RSC','NLTT20'),('SSR','NLTT20'),('TAG','NLTT20'),('ATT','NLTT21'),('DVC','NLTT21'),('ODRSC','NLTT21'),('RSC','NLTT21'),('SSR','NLTT21'),('TAG','NLTT21'),('ATT','NLTT22'),('DVC','NLTT22'),('ODRSC','NLTT22'),('RSC','NLTT22'),('SSR','NLTT22'),('TAG','NLTT22'),('ATT','NLTT23'),('DVC','NLTT23'),('ODRSC','NLTT23'),('RSC','NLTT23'),('SSR','NLTT23'),('TAG','NLTT23'),('ATT','NLTT24'),('DVC','NLTT24'),('ODRSC','NLTT24'),('RSC','NLTT24'),('SSR','NLTT24'),('TAG','NLTT24'),('ATT','NLTT25'),('DVC','NLTT25'),('ODRSC','NLTT25'),('RSC','NLTT25'),('SSR','NLTT25'),('TAG','NLTT25'),('ATT','NLTT26'),('DVC','NLTT26'),('ODRSC','NLTT26'),('RSC','NLTT26'),('SSR','NLTT26'),('TAG','NLTT26'),('ATT','NLTT27'),('DVC','NLTT27'),('ODRSC','NLTT27'),('RSC','NLTT27'),('SSR','NLTT27'),('TAG','NLTT27'),('ATT','NLTT28'),('DVC','NLTT28'),('ODRSC','NLTT28'),('RSC','NLTT28'),('SSR','NLTT28'),('TAG','NLTT28'),('ATT','NLTT29'),('DVC','NLTT29'),('ODRSC','NLTT29'),('RSC','NLTT29'),('SSR','NLTT29'),('TAG','NLTT29'),('ATT','NLTT3'),('DVC','NLTT3'),('ODRSC','NLTT3'),('RSC','NLTT3'),('SSR','NLTT3'),('TAG','NLTT3'),('ATT','NLTT30'),('DVC','NLTT30'),('ODRSC','NLTT30'),('RSC','NLTT30'),('SSR','NLTT30'),('TAG','NLTT30'),('ATT','NLTT31'),('DVC','NLTT31'),('ODRSC','NLTT31'),('RSC','NLTT31'),('SSR','NLTT31'),('TAG','NLTT31'),('ATT','NLTT32'),('DVC','NLTT32'),('ODRSC','NLTT32'),('RSC','NLTT32'),('SSR','NLTT32'),('TAG','NLTT32'),('ATT','NLTT33'),('DVC','NLTT33'),('ODRSC','NLTT33'),('RSC','NLTT33'),('SSR','NLTT33'),('TAG','NLTT33'),('ATT','NLTT34'),('DVC','NLTT34'),('ODRSC','NLTT34'),('RSC','NLTT34'),('SSR','NLTT34'),('TAG','NLTT34'),('ATT','NLTT35'),('DVC','NLTT35'),('ODRSC','NLTT35'),('RSC','NLTT35'),('SSR','NLTT35'),('TAG','NLTT35'),('ATT','NLTT36'),('DVC','NLTT36'),('ODRSC','NLTT36'),('RSC','NLTT36'),('SSR','NLTT36'),('TAG','NLTT36'),('ATT','NLTT37'),('DVC','NLTT37'),('ODRSC','NLTT37'),('RSC','NLTT37'),('SSR','NLTT37'),('TAG','NLTT37'),('ATT','NLTT4'),('DVC','NLTT4'),('ODRSC','NLTT4'),('RSC','NLTT4'),('SSR','NLTT4'),('TAG','NLTT4'),('ATT','NLTT5'),('DVC','NLTT5'),('ODRSC','NLTT5'),('RSC','NLTT5'),('SSR','NLTT5'),('TAG','NLTT5'),('TAG','NLTT6'),('TAG','NLTT7'),('TAG','NLTT8'),('ATT','NLTT9'),('DVC','NLTT9'),('ODRSC','NLTT9'),('RSC','NLTT9'),('SSR','NLTT9'),('TAG','NLTT9'),('ATT','NTT1'),('DVC','NTT1'),('SSR','NTT1'),('TAG','NTT1'),('ATT','NTT2'),('DVC','NTT2'),('SSR','NTT2'),('TAG','NTT2'),('ATT','NTT3'),('DVC','NTT3'),('SSR','NTT3'),('TAG','NTT3'),('ATT','NTT4'),('DVC','NTT4'),('SSR','NTT4'),('TAG','NTT4'),('ATT','NTT5'),('DVC','NTT5'),('SSR','NTT5'),('TAG','NTT5'),('ATT','PLTT1'),('DVC','PLTT1'),('SSR','PLTT1'),('TAG','PLTT1'),('ATT','PLTT10'),('DVC','PLTT10'),('SSR','PLTT10'),('TAG','PLTT10'),('TAG','PLTT11'),('TAG','PLTT12'),('ATT','PLTT13'),('DVC','PLTT13'),('SSR','PLTT13'),('TAG','PLTT13'),('ATT','PLTT14'),('DVC','PLTT14'),('SSR','PLTT14'),('TAG','PLTT14'),('ATT','PLTT15'),('DVC','PLTT15'),('SSR','PLTT15'),('TAG','PLTT15'),('NRSC','PLTT16'),('ODRSC','PLTT16'),('RSC','PLTT16'),('ATT','PLTT17'),('DVC','PLTT17'),('SSR','PLTT17'),('TAG','PLTT17'),('ATT','PLTT2'),('DVC','PLTT2'),('SSR','PLTT2'),('TAG','PLTT2'),('ATT','PLTT3'),('DVC','PLTT3'),('SSR','PLTT3'),('TAG','PLTT3'),('ATT','PLTT4'),('DVC','PLTT4'),('RSC','PLTT4'),('SSR','PLTT4'),('TAG','PLTT4'),('ATT','PLTT5'),('DVC','PLTT5'),('SSR','PLTT5'),('TAG','PLTT5'),('ATT','PLTT6'),('DVC','PLTT6'),('RSC','PLTT6'),('SSR','PLTT6'),('TAG','PLTT6'),('DVC','PLTT7'),('SSR','PLTT7'),('TAG','PLTT7'),('ATT','PLTT8'),('DVC','PLTT8'),('SSR','PLTT8'),('TAG','PLTT8'),('ATT','PLTT9'),('DVC','PLTT9'),('SSR','PLTT9'),('TAG','PLTT9');
/*!40000 ALTER TABLE `BRIDGE_iot_critical_object_threat_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `BRIDGE_resilient_solution_threat_type`
--

DROP TABLE IF EXISTS `BRIDGE_resilient_solution_threat_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `BRIDGE_resilient_solution_threat_type` (
  `RESSOL_id` varchar(255) NOT NULL,
  `TT_id` varchar(255) NOT NULL,
  PRIMARY KEY (`RESSOL_id`,`TT_id`),
  KEY `TT_id` (`TT_id`),
  CONSTRAINT `BRIDGE_resilient_solution_threat_type_ibfk_1` FOREIGN KEY (`RESSOL_id`) REFERENCES `resilient_solution` (`resilient_solution_id`),
  CONSTRAINT `BRIDGE_resilient_solution_threat_type_ibfk_2` FOREIGN KEY (`TT_id`) REFERENCES `threat_type` (`iot_threat_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `BRIDGE_resilient_solution_threat_type`
--

LOCK TABLES `BRIDGE_resilient_solution_threat_type` WRITE;
/*!40000 ALTER TABLE `BRIDGE_resilient_solution_threat_type` DISABLE KEYS */;
INSERT INTO `BRIDGE_resilient_solution_threat_type` VALUES ('DTK11','ALTT1'),('DTK4','ALTT1'),('SHTK2','ALTT1'),('SPTK30','ALTT1'),('SPTK31','ALTT1'),('DTK11','ALTT2'),('DTK4','ALTT2'),('SHTK2','ALTT2'),('SPTK30','ALTT2'),('SPTK31','ALTT2'),('DTK11','ALTT3'),('DTK4','ALTT3'),('SHTK2','ALTT3'),('SPTK30','ALTT3'),('SPTK31','ALTT3'),('DTK11','ALTT4'),('DTK4','ALTT4'),('SHTK2','ALTT4'),('SPTK30','ALTT4'),('SPTK31','ALTT4'),('DTK11','ALTT5'),('DTK4','ALTT5'),('SHTK2','ALTT5'),('SPTK17','ALTT5'),('SPTK30','ALTT5'),('SPTK31','ALTT5'),('DTK11','ALTT6'),('DTK4','ALTT6'),('SHTK2','ALTT6'),('SPTK30','ALTT6'),('SPTK31','ALTT6'),('DTK11','ALTT7'),('DTK4','ALTT7'),('SHTK2','ALTT7'),('SPTK30','ALTT7'),('SPTK31','ALTT7'),('DTK11','ALTT8'),('DTK4','ALTT8'),('SPTK30','ALTT8'),('SPTK31','ALTT8'),('DTK11','ALTT9'),('DTK4','ALTT9'),('SPTK30','ALTT9'),('SPTK31','ALTT9'),('DTK1','HTT1'),('SHTK3','HTT1'),('SHTK5','HTT1'),('DTK1','HTT10'),('SHTK3','HTT10'),('FRTK9','HTT2'),('DTK1','HTT4'),('DTK2','HTT8'),('DTK1','HTT9'),('DTK11','NLTT1'),('DTK4','NLTT1'),('SPTK30','NLTT1'),('SPTK31','NLTT1'),('DTK11','NLTT10'),('DTK4','NLTT10'),('SHTK6','NLTT10'),('SPTK2','NLTT10'),('SPTK30','NLTT10'),('SPTK31','NLTT10'),('SPTK32','NLTT10'),('SPTK33','NLTT10'),('SPTK34','NLTT10'),('SPTK35','NLTT10'),('SPTK36','NLTT10'),('DTK11','NLTT11'),('DTK4','NLTT11'),('SPTK30','NLTT11'),('SPTK31','NLTT11'),('DTK11','NLTT12'),('SPTK30','NLTT12'),('SPTK31','NLTT12'),('DTK11','NLTT13'),('DTK4','NLTT13'),('SPTK30','NLTT13'),('SPTK31','NLTT13'),('DTK11','NLTT14'),('DTK4','NLTT14'),('SPTK17','NLTT14'),('SPTK30','NLTT14'),('SPTK31','NLTT14'),('DTK11','NLTT15'),('DTK4','NLTT15'),('SPTK30','NLTT15'),('SPTK31','NLTT15'),('SPTK32','NLTT15'),('DTK11','NLTT16'),('DTK4','NLTT16'),('SPTK30','NLTT16'),('SPTK31','NLTT16'),('SPTK33','NLTT16'),('SPTK34','NLTT16'),('SPTK35','NLTT16'),('SPTK36','NLTT16'),('DTK11','NLTT17'),('DTK4','NLTT17'),('SPTK30','NLTT17'),('SPTK31','NLTT17'),('DTK11','NLTT18'),('DTK4','NLTT18'),('SPTK30','NLTT18'),('SPTK31','NLTT18'),('SPTK32','NLTT18'),('DTK11','NLTT19'),('DTK4','NLTT19'),('SPTK30','NLTT19'),('SPTK31','NLTT19'),('SPTK32','NLTT19'),('DTK11','NLTT2'),('DTK12','NLTT2'),('DTK4','NLTT2'),('DTK7','NLTT2'),('DTK8','NLTT2'),('SPTK30','NLTT2'),('SPTK31','NLTT2'),('DTK11','NLTT20'),('DTK4','NLTT20'),('SPTK30','NLTT20'),('SPTK31','NLTT20'),('SPTK32','NLTT20'),('DTK11','NLTT21'),('DTK4','NLTT21'),('SPTK30','NLTT21'),('SPTK31','NLTT21'),('SPTK32','NLTT21'),('DTK11','NLTT22'),('DTK4','NLTT22'),('SPTK30','NLTT22'),('SPTK31','NLTT22'),('SPTK32','NLTT22'),('DTK11','NLTT23'),('DTK4','NLTT23'),('SPTK30','NLTT23'),('SPTK31','NLTT23'),('SPTK32','NLTT23'),('DTK11','NLTT24'),('DTK4','NLTT24'),('SPTK30','NLTT24'),('SPTK31','NLTT24'),('SPTK32','NLTT24'),('DTK11','NLTT25'),('DTK4','NLTT25'),('SPTK30','NLTT25'),('SPTK31','NLTT25'),('SPTK32','NLTT25'),('DTK11','NLTT26'),('DTK4','NLTT26'),('SPTK30','NLTT26'),('SPTK31','NLTT26'),('SPTK32','NLTT26'),('DTK11','NLTT27'),('DTK4','NLTT27'),('SPTK30','NLTT27'),('SPTK31','NLTT27'),('SPTK32','NLTT27'),('DTK11','NLTT28'),('DTK4','NLTT28'),('SPTK30','NLTT28'),('SPTK31','NLTT28'),('SPTK32','NLTT28'),('DTK11','NLTT29'),('DTK4','NLTT29'),('SPTK30','NLTT29'),('SPTK31','NLTT29'),('SPTK32','NLTT29'),('DTK10','NLTT3'),('DTK11','NLTT3'),('DTK4','NLTT3'),('SPTK23','NLTT3'),('SPTK30','NLTT3'),('SPTK31','NLTT3'),('DTK11','NLTT30'),('DTK4','NLTT30'),('SPTK30','NLTT30'),('SPTK31','NLTT30'),('SPTK32','NLTT30'),('DTK11','NLTT31'),('DTK4','NLTT31'),('SPTK30','NLTT31'),('SPTK31','NLTT31'),('SPTK32','NLTT31'),('DTK11','NLTT32'),('DTK4','NLTT32'),('SPTK30','NLTT32'),('SPTK31','NLTT32'),('DTK11','NLTT33'),('DTK4','NLTT33'),('SPTK30','NLTT33'),('SPTK31','NLTT33'),('DTK11','NLTT34'),('DTK4','NLTT34'),('SPTK30','NLTT34'),('SPTK31','NLTT34'),('DTK11','NLTT35'),('DTK4','NLTT35'),('SPTK30','NLTT35'),('SPTK31','NLTT35'),('DTK11','NLTT36'),('DTK4','NLTT36'),('SPTK19','NLTT36'),('SPTK30','NLTT36'),('SPTK31','NLTT36'),('DTK11','NLTT37'),('DTK4','NLTT37'),('SPTK22','NLTT37'),('SPTK30','NLTT37'),('SPTK31','NLTT37'),('DTK11','NLTT4'),('DTK12','NLTT4'),('DTK13','NLTT4'),('DTK14','NLTT4'),('DTK15','NLTT4'),('DTK4','NLTT4'),('SPTK30','NLTT4'),('SPTK31','NLTT4'),('DTK11','NLTT5'),('DTK4','NLTT5'),('SPTK3','NLTT5'),('SPTK30','NLTT5'),('SPTK31','NLTT5'),('SPTK32','NLTT5'),('SPTK33','NLTT5'),('SPTK34','NLTT5'),('SPTK35','NLTT5'),('SPTK36','NLTT5'),('SPTK4','NLTT5'),('SPTK5','NLTT5'),('DTK11','NLTT6'),('DTK4','NLTT6'),('SPTK30','NLTT6'),('SPTK31','NLTT6'),('SPTK33','NLTT6'),('SPTK34','NLTT6'),('SPTK35','NLTT6'),('SPTK36','NLTT6'),('DTK11','NLTT7'),('DTK4','NLTT7'),('SPTK30','NLTT7'),('SPTK31','NLTT7'),('DTK11','NLTT8'),('DTK4','NLTT8'),('SPTK30','NLTT8'),('SPTK31','NLTT8'),('SPTK33','NLTT8'),('SPTK34','NLTT8'),('SPTK35','NLTT8'),('SPTK36','NLTT8'),('DTK11','NLTT9'),('DTK4','NLTT9'),('SPTK22','NLTT9'),('SPTK30','NLTT9'),('SPTK31','NLTT9'),('SPTK32','NLTT9'),('RTK7','NTT5'),('DTK11','PLTT1'),('DTK4','PLTT1'),('SPTK17','PLTT1'),('SPTK30','PLTT1'),('SPTK31','PLTT1'),('DTK11','PLTT10'),('DTK4','PLTT10'),('SPTK30','PLTT10'),('SPTK31','PLTT10'),('DTK11','PLTT11'),('DTK4','PLTT11'),('SPTK19','PLTT11'),('SPTK30','PLTT11'),('SPTK31','PLTT11'),('SPTK33','PLTT11'),('SPTK34','PLTT11'),('SPTK35','PLTT11'),('SPTK36','PLTT11'),('DTK11','PLTT12'),('DTK4','PLTT12'),('SPTK19','PLTT12'),('SPTK30','PLTT12'),('SPTK31','PLTT12'),('SPTK33','PLTT12'),('SPTK34','PLTT12'),('SPTK35','PLTT12'),('SPTK36','PLTT12'),('SPTK33','PLTT13'),('SPTK34','PLTT13'),('SPTK35','PLTT13'),('SPTK36','PLTT13'),('DTK11','PLTT14'),('DTK4','PLTT14'),('SPTK30','PLTT14'),('SPTK31','PLTT14'),('DTK11','PLTT15'),('DTK4','PLTT15'),('SPTK30','PLTT15'),('SPTK31','PLTT15'),('DTK11','PLTT16'),('DTK4','PLTT16'),('SPTK19','PLTT16'),('SPTK30','PLTT16'),('SPTK31','PLTT16'),('DTK11','PLTT17'),('DTK4','PLTT17'),('SPTK30','PLTT17'),('SPTK31','PLTT17'),('DTK11','PLTT2'),('DTK4','PLTT2'),('SHTK5','PLTT2'),('SPTK1','PLTT2'),('SPTK30','PLTT2'),('SPTK31','PLTT2'),('SPTK33','PLTT2'),('SPTK34','PLTT2'),('SPTK35','PLTT2'),('SPTK36','PLTT2'),('DTK11','PLTT3'),('DTK4','PLTT3'),('SPTK30','PLTT3'),('SPTK31','PLTT3'),('DTK11','PLTT4'),('DTK4','PLTT4'),('SPTK17','PLTT4'),('SPTK30','PLTT4'),('SPTK31','PLTT4'),('DTK11','PLTT5'),('DTK4','PLTT5'),('SPTK30','PLTT5'),('SPTK31','PLTT5'),('DTK11','PLTT6'),('DTK4','PLTT6'),('SPTK17','PLTT6'),('SPTK22','PLTT6'),('SPTK30','PLTT6'),('SPTK31','PLTT6'),('DTK11','PLTT7'),('DTK4','PLTT7'),('SPTK30','PLTT7'),('SPTK31','PLTT7'),('SPTK33','PLTT7'),('SPTK34','PLTT7'),('SPTK35','PLTT7'),('SPTK36','PLTT7'),('DTK11','PLTT8'),('DTK4','PLTT8'),('SPTK30','PLTT8'),('SPTK31','PLTT8'),('DTK11','PLTT9'),('DTK4','PLTT9'),('SPTK30','PLTT9'),('SPTK31','PLTT9');
/*!40000 ALTER TABLE `BRIDGE_resilient_solution_threat_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `iot_critical_object`
--

DROP TABLE IF EXISTS `iot_critical_object`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `iot_critical_object` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `acronym` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `acronym` (`acronym`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `iot_critical_object`
--

LOCK TABLES `iot_critical_object` WRITE;
/*!40000 ALTER TABLE `iot_critical_object` DISABLE KEYS */;
INSERT INTO `iot_critical_object` VALUES (12,'Device','DVC'),(13,'Tag','TAG'),(14,'Sensor','SSR'),(15,'Actuator','ATT'),(16,'Active Digital Artefact','ADA'),(17,'Passive Digital Artefact','PDA'),(18,'Service','SVC'),(19,'Resource','RSC'),(20,'Network Resource','NRSC'),(21,'On-Device Resource','ODRSC'),(22,'Smart Camera','SMCAM');
/*!40000 ALTER TABLE `iot_critical_object` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `resilient_solution`
--

DROP TABLE IF EXISTS `resilient_solution`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `resilient_solution` (
  `id` int NOT NULL AUTO_INCREMENT,
  `resilient_solution_id` varchar(255) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `description` text,
  `references` varchar(255) DEFAULT NULL,
  `resilient_solution_enum` int DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `resilient_solution_id` (`resilient_solution_id`),
  KEY `resilient_solution_resilient_solution_enum_id_fk` (`resilient_solution_enum`),
  CONSTRAINT `resilient_solution_resilient_solution_enum_id_fk` FOREIGN KEY (`resilient_solution_enum`) REFERENCES `resilient_solution_enum` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=98 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `resilient_solution`
--

LOCK TABLES `resilient_solution` WRITE;
/*!40000 ALTER TABLE `resilient_solution` DISABLE KEYS */;
INSERT INTO `resilient_solution` VALUES (1,'EETK1','SNBP','Simple Naive Bayes Prediction model (SNBP model) is a technique to remove unnecessary and redundant data, which saves he energy to be used for transmission of data in Wireless Sensor Networks and increases the life of network as data for  ransmission is reduced which saves that energy of sensor nodes.','P70',4),(2,'EETK2','INBP','| Incremental Naive Bayes Prediction model (INBP model) is a technique that apply data reductionto remove data redundancy in wSN, increase life of network and save energy of WSN. INBP isfocused on prediction approach for weather forecasting in WSN with several data attributes to remove data redundancy and save the energy of sensor nodes. More details can he foundat','P71',4),(3,'EETK3','Energy Efficient Routing Protocol','Routing Protocols in the network layer is a techniques for designing low-power systems based on fixed hardware platforms for improving energy efficiency in WSN. More details can be found atp72','P72',4),(4,'EETK4','Energy Efficient MAC Protocol','Scheduling and Contention Protocols in the MAC layer is a techniques for designing low-powersystems based on fixed hardware platforms for improving energy efficiency in WSN. More details can be found at [p73]','P73',4),(5,'EETK5','Energy Efficient Data Aggregation technique','Energy Efficient Data Aggregation technique is a energy efficient routing protocol for WirelesSSensor Networks which is energy efficient and reliable. This technique is based on cluster formation and the loss ratios of the clusters are measured so that the energy consumption can be effectively reduced. Reliable transmission can be provided in the clusters using a coordinate node. More details can be found at [p74,p75]','P74,P75',4),(6,'RTK1','Data Redundancy','The most common scenarios of redundancy in information systems are data redundancy.All forms of data can be redundant -- files, databases, and objects in memory. Data and its replications can reside in the same machine or in different locations across machines, networks, and geographical areas. In a server-client system, data and its replications can all be on server side, or some on server side and some on client side, for example, client-side cache. Redundancy of data increases data\'s availability in case of failures due to unexpected heavy load, data node failures or lost connection between client and server','P76',6),(7,'RTK2','Processing Redundancy','Similar to data elements, processing elements can also be redundant in a system. This form of redundancy is also very common in enterprise information systems, for example, clustering of web servers and application servers. However, redundancy of processing elements is more difficult than data elements because of the problem of state. If a processing element needs to maintain state for an undergoing computation task, then it is difficult to make the processing element truly redundant. For if the processing element fails, there is no way to recover the task state that only exists in that element. There are two approaches to addressing this problem -- to make the task stateless or to restart the whole task from its initial state in case of failure','P76',6),(8,'RTK3','Element Replication','A common way to achieve redundancy is to create replicas of an element. The structure and functionality of a replica are exactly the same as that element so that they can substitute each other without problem. Follows some ways of implementing redundancy using [p87]: Design for failure: Acquiring more resources than needed and replace failed ones (DC A.8).Allowing component replication: State-machine (active) replication (DC A.11), Transactional replication (DC A.12), Virtual synchrony (DCA 13)','P76,P87',6),(9,'RTK4','Hardware Clustering',' High-availability clustering is a technique for protecting against failures by mirroring the whole computer rather than just a disk. In a clustered configuration, two or more identical computers (referred to as.nodes) are deployed in parallel and share the total workload between them. If any one of the nodes fails, one of the remaining nodes takes over its workload and processing can continue (although the transactions in progress at the failed node may have to be resubmitted) This process is known as failover. Follows some ways of implementing it using [p87]: VE Resolution location-oriented (DCA.1), VE Resolution domain-oriented (DC A.2), VE Resolution Semantic Web-oriented (DCA.3), VE Resolution Peer-to-Peer-oriented (DC A4)','P87,P88',6),(10,'RTK5','Relaxing Transactional Consistency','To follow this tactic the loT-A recommend the use of the \'BASE architecture (DC A.14). The BASE (Basically Available, Soft-state, Eventually consistent) architecture\' is applicable in systems supporting distributed transactions with optimistic replication strategy. In this approach replicas of information are sent through a distributed system via transactions and eventual consistency\' among the replicas is achieved by either the update reaches the replica or the replica retires from service. BASE requires some conflict resolution functionality and additional system resources in order to find failure in transactions. The approach is applicable for hiah performance desians.','p87',6),(11,'RTK6','Redundant Disk Architectures','Redundant disk architectures (such as RAID 1 or mirored disks) are a particularly common example. RAID (Redundant Array of Inexpensive or Independent Disks) architectures are available in a variety of configurations, known as RAID levels, which variously provide resilience through mimoring, improved performance through striping, and/or error correction. As shown in the diagram below, disk writes are applied to each side of the mirror, whereas reads come from only one side (or in some configurations, whichever side can return the information with the least amount of head movement). If either disk fails, the other can continue on its own until the faulty disk is replaced and resynchronized.','P88',6),(12,'RTK7','Redundant Power Supply Techniques','Redundant power is a critical component in high availability systems. In the simplest solution, two power supplies can drive a load through diodes to OR their outputs together. In this way, the power supplies can either share the load or have one active and the other in standby. A field effect transistor (FET) ORing controller is a more practical solution because it avoids the diode voltage drop, power Ioss and heat dissipation. More creative and economical systems can be configured with the low voltage loss MOSFET. Examples of redundant power supply Lconfiaurations farsen/er annlications are discussedin IP771','P77',6),(13,'RTK8','N-Version Programming','At least two programs or components are independently developed for the same specification in n-version programming. Different versions are sensitive to different system failures because of their inter-independence, and therefore n-version programming can make a system tolerant to more unexpected failures.','P76',6),(14,'RTK9','Serendipitous Redundancy by Reuse','Serendipitous redundancy happens whenthe function of a failed component can be partially substituted with a different component that was designed to achieve a totally different goal from the failed one. Serendipitous redundancy is possible only if (1) those two components share some common functionality, and (2) their interfaces to provide the common functionality are the same.','P76',6),(15,'SPTK1','Intrusion Prevention System','To follow this tactic the Cumulative-Sum-based Intrusion Prevention System (CSIPS). can be applied. It which detects maliciov behaviors, attacks and distnbuted attacks launched to remote cients and local hosts based on the Cumulative Sum (CUSUM) algorithm p3) In addition to the use of IPS the (p7] describes the use of Intrusion Detection Systems (1DS) techniques propose for detecting the presence ofjammers and numerous mechanisms which attempt to protect the network from jamming attacks.','P5,P7',9),(16,'SPTK2','Source Bootstrapping','Bootstrapping is a process in which one device is associated or connected with a part of network or similar devices. During the bootstrapping phase, a unique identity and other security parameters are associated with each device thing. Secure bootstrapping ensures that only authenticated devices access the network. The simplest mechanism for carying out the initial setup (security parameters, node identity) is via physical interface (USB, wire, chip contact, etc.). Wireless bootstrapping may lead to eavesdropping although it can be avoided by using advanced cryptographic mechanisms which provide confidentiality. To optimize the key distribution mechanism, several key management schemes have been proposed in literature for WSNs [p6], to support secure communication and authentication among WSNs devices.','P6',NULL),(17,'SPTK3','Smart Antennas','The p[47] proposed the use ot smart antennas against malicious eavesdroppers. The p[47] proposed a suite ot strategies that use arays of amays to provide considerable reductions in the exposure region. Exposure region that refers to the area within which an eavesdropper can access and decode the signals being transmitted. More details in [p47].','P47',NULL),(18,'SPTK4','Data Cryptography','Like traditional networks, Wireless sensorS applications require protection against eavesdropping. alteration, and packet injection. In order to achieve this protection, data cryptography can prevent these security issues. The p48] describes countermeasures that can be applyıed to IoT.','p48',NULL),(19,'SPTK5','Source Booting in Physical Layer','Authentication and the integrity of the software on the device should be verified using cryptographic hash algorithms, which would provide digital signatures. However, because of the low processing power on most of the devices and their need for ultra-low power consumption most cryptographic hash algorithms cannot be implemented, apart from NH and WH cryptographic hash functions that are optimal for ultra-low power consumption devices.','P60',NULL),(20,'SPTK6','Device Authentication in Physical Layer','When a new device is introduced to the network, it should authenticate itself before receiving or transmitting data, to ensure it is identified corectly betore authorization and keeping malicious devices out of the system.','P60',NULL),(21,'SPTK7','Data Integrity in Physical Layer','Eror detection mechanisms should be provided at each device, to ensure no tampering of sensitive data occurs. Low power consumption mechanisms like Cyclic Redundancy Checks (CRC), Checksum, Parity Bit are prefered, but for more secure eror detection method WH cryptographic hash function should be applied.','P60',NULL),(22,'SPTK8','Data Confidentiality in Physical Layer','All RFID Tags, IDs and data should be encrypted on each device before transmission of data to ensure contidentiality. However, because of the ultra-low power consumption, strong cryptographic encryption functions like AES cannot be implemented. Instead Blowfish or RSA have lower power consumption and less processing power and can be successfully implemented on the physical layer devices.','P60',NULL),(23,'SPTK9','Anonimity in Physical Layer','In some cases hiding sensitive infomation like the location and identity of nodes is crucial. Although Zero-Knowledge approach would be the optimal solution for anonymity, it cannot be implemented on low power device as it is a very strong algorithm and needs a lot of processing power, hence K-Anonymity approach best fits the job for low power devices such as the devices used in an IoT system.','P60',NULL),(24,'SPTK10','Data Privacy in Network Layer','Illegal access to the sensor nodes can be prevented, using authentication mechanisms and point to point encryption.','P60',NULL),(25,'SPTK11','Routing Security in Network Layer','Secure routing is vital to the acceptance and use of sensor networks for many applications, but the majority of used routing protocols are insecure. However, security of routing can be ensured by providing multiple paths for the data routing which improves the ability of the system to detect an error and keep performing upon any known of failure in the system. Also, encryption and authentication mechanisms increase the security level of routing data.','P60',NULL),(26,'SPTK12','Data Integrity in Network Layer','Using cryptographic hash functions, the integrity of the data received on the other end is confimed. In case of prove of tampering of data, error correction mechanisms could be introduced to mitigate the problem.','P60',NULL),(27,'SPTK13','Data Security in App Layer','Authentication Encryption and integrity mechanisms are citical at this level for insuring the privacy of the whole system and protecting against data theft, it prevents unauthorized access to the system and ensures the confidentiality of the system data.','P60',NULL),(28,'SPTK14','Access Control Lists in App Layer','Setting up policies and pemissions of who can access and control the IoT system, is a crucial part as this ensures the privacy of the data, and the well being of the system. ACLs can block or allow incoming or out going traffic, and give or block access to requests rom different users inside or outside of the network.','P60',NULL),(29,'SPTK15','Firewalls in App Layer','This is an extra effective layer of security that will help block attacks that authentication, encryption and ACLs would failed to do so. Authentication and encryption passwords can be broken if weak passwords were selected. A firewall can filter packets as they are received, blocking unwanted packets, unfriendly login attempts, and DoS attacks before even authentication process begins.','P60',NULL),(30,'SPTK16','Anti-Virus, Anti-Spyware and Anti-Adware in App Layer','Secunty software like antivirus or anti spyware is important for the reliability, security, integnty and confidentiality of the IoT system.','P60',NULL),(31,'SPTK17','Autonomic Cyber Security Management Framework','To follow this article the [p8] can be applied. This work introduces an autonomic model-based cyber security management approach for the Internet ot Things (IoT) ecosystems. The approach aims at realizing a self-protecting system, which has the ability to autonomously estimate, detect, and react to cyber attacks at an early stage. The approach integrates various model-based techniques including: 1) real-time estimation and baseline security controls to predict and eliminate potential cyber attacks. 2) Data analysis to indentify and classify attacks, and 3) a multicriteria  ptimization method to select the optimal active response for deploying countemeasures while maintaining system functions. The prototype framework has been developed with a master controller virtual machine, which can be configured for various platfoms. Besides estimating, detecting, and protecting against known attacks, the approach can also learn signatures of unknown attacks in real time. Unknown attacks are identified for future protection by updating detection algorithms with the underlying signatures. In our framework design, the main protection modules are installed on the MC-VM, which ensures that the self-protection mechanism continues to work even if the underlying system is compromised. A multitier web application case study is presented. Our self-protecting system successfully secured the web application from various known and unknown attacks. Below is a figure of main components of the autonomic security management framework. More details in [p8].','P8',NULL),(32,'SPTK18','Classical Countermeasures for Self Protection','Security solutions have been classified as either self-protecting or self-healing, in relation to the autonomic mechanism used for mitigation. Self-protecting solutions tollow a passive approach and attempt to prevent security threats betrore they happen. Ihis is done using various cryptographic techniques, with the knowledge of how common attacks are executed. In the case of self-healing solutions, the specific counter-measures for mitigation are taken only after the attack has been detected. Reactive measures are easier to achieve than protective measures, as typically the attacks aim confidentiality, integrity, availability, authenticity or privacy. Nevertheless, it is important to include protective mechanisms as well supplementing the reactive mechanisms, resulting in what we call as hybrid schemes. In p[15] is presented countemeasures','P15',NULL),(33,'SPTK19','Enhance Location Privacy','Vast deployment will make RFID a pervasive technology. Thus, security and privacy are import issues to be considered. Many location-aware applications emerge. Systems are capable of tracking all of our movements and recording anything. This is done in the name of convenience or due to economic reasons. Legislation must ensure that privacy of the individual is still protected, researchers must develop the required techniques. An overview of curent approaches for enhancement of privacy has been given above and their capability of handling the various threats RFID technology faces has been explained. The [p24] proposed a hash-based scheme with a high inherent security rendering it a useful technique for all kinds of applications where static identifiers are used curently and location privacy is an issue. The main benefit of the proposed scheme is its simplicity: It only requires implementation of a hash function in the tag and data management at the backend and does not rely on random numbers generated by the tag, strong symmetrnic or even asymmetrnic encryption. It offers a high degree of location privacy and is resistant to many forms of attacks like eavesdropping. Further, only a single message exchange is required, the communications channel need not be reliable. the reader third party need not be trusted, and no long-term secrets need to be stored in tags. Most ot the denoted drawbacks have already been solved and the solutions will be published in subsequent publications.','P24',NULL),(34,'SPTK20','Countermeasures for Time Synchronization Attacks','In P[28] is proposed countemeasures for single hop networks and multi-hop networks separately. Each time synchronization protocol facilitates single hop synchronization by having a node periodically broadcast its local version or the global time and allowing the other nodes to synchronize their clocks to that time. Since multihop time symchronization algorithms are all extensions to that basic bulding block, our proposals tor multihop networks are a superset of our proposals for single hop networks.','P28',NULL),(35,'SPTK21','Routing Protocol','AODV, DSR, TORA and OLSR ad-hoc routing protocols.','P29',NULL),(36,'SPTK22','Threshold Cryptography Based Group Authentication','Internet of things (IoT) is an emerging paradigm where the devices around us (persistent and non persistent) are connected to each other to provide seamless communication, and contextual services. In the IoT, each device cannot be authenticated in the short time due to unbounded number of devices. Equally, it is difficult to get receipt of their authentication request at the same time. Therefore, secure, and efficient group authentication scheme is required that authenticates a group of devices at once in the context of resource constrained IoT. The p[30] presents novel Threshold Cryptography-based Group Authentication (TCGA) scheme for the IoT which verifies authenticity of all the devices taking part in the group communication. The proposed TCGA scheme is implemented for WiFi environment, and the result shows that TCGA scheme is lightweight, and alleviates the efect of battery exhaustion attack. The p[30] also presents time analysis, and formal security analysis of TCGA scheme which shows that the proposed TCGA scheme is safe from the replay, man-in-the-middle attack, and is scalable in nature.','P30',NULL),(37,'SPTK23','Sybil Limit','Decentralized distributed systems such as peer-to-peer systems are particularly vulnerable to sybil attacks, where a malicious user pretends to have multiple identities (called sybil nodes). without a trusted central authority, defending against sybil attacks is quite chalenging. Among the small number ot decentralized approaches, the recent SybilGuard protocol of p[38] leverages a key insight on social networks to bound the number of sybil nodes accepted. Although its direction is promising, SybilGuard can allow a large number of sybil nodes to be accepted. Furthemore, Sybil Guard assumes that social networks are fast mixing, which has never been confirmed in the real world. The p[38] presents the novel SybilLimit protocol that leverages the same insight as SybilGuard but offers dramatically improved and near-optimal guarantees. The number of sybil nodes accepted is reduced by a factor of O(sqrt(n)), or around 200 times in our experiments for a million-node system. We further prove that SybilLimit1\' guarantee is at most a log(n) factor away from optimal, when considering approaches based on fast-mixing social networks. Finally, based on three large-scale real-world social networks. The p[38] provide the first evidence that real-world social networks are indeed fast mixing. This validates the fundamental assumption behind SybillLimit\'s and SybilGuard s approach','P38',NULL),(38,'SPTK24','Sybyl Guard','Peer-to-peer and other decentralized, distributed systems are known to be particularly vulnerable to sybil attacks. In a sybil attack, a malicious user obtains multiple fake identities and pretends to be multiple, distinct nodes in the System. By controlling a large fraction of the nodes in the system, the malicious user is able to out vote the honest users in collaborative tasks such as Byzantine failure defenses. This paper presents SybilGuard, a novel protocol for limiting the corruptive influences of sybil attacks. Our protocol is based on the socil network among user identities, Where an edge between two identities indicates a human-established trust relationship. Malicious users can create many identities but few trust relationships. Thus, there is a disproportionately-small cut in the graph between the sybil nodes and the honest nodes. SybilGuard exploits this property to bound the number ot identities a malicious user can create. we show the effectiveness of SybilGuard both analytically and experimentally','P39',NULL),(39,'SPTK25','Lightweight Defense Scheme','The p[90] proposed a Lightweaght Defense Scheme against Selective Forwarding Attacks in Wireless Sensor Networks that can be used in IoT application. According to characteristics of easy positioning the nodes around transmission paths in a structured topology made of hexagonal mesh, the nodes around transmission path are used to monitor packet transmission of its neighbor nodes, judge the attackers location and resend the packets dropped by the attackers. The method is etfective in detecting selective forwarding attacks to ensure reliable packet delivery. Analysis and simulation results show that the proposed scheme consumes less energy and storage. More details in p[90]. Advantages: The routing discover scheme is dynamically generating path which makes adversary difficult to launch attack. There is no traftic overhead to detect malicious node. Neighbour nodes are judging the malicious nature of a node, so no need of shared key between every two nodes in the network, which reduces storage required. Eficient utilization of energy since only one node is active at a time in each RC. Drawbacks: How much trustworthy a monitor node is? -If a node is malicious, the scheme did not explain whether to remove complete RC or only that node from routing discovery process. If we are removing complete RC then not efficient resource utilization. -Routing is a probability based one which is not an optimal one. We require GPS to acquire the locations of nodes which makes network costly.','p45,p90',NULL),(40,'SPTK26','Multi Data Flow Scheme','Multi Data Flow Scheme is a single scheme which defends against selective forwarding attack. The scheme uses multiflow topologies to defend the attack. In multi-dataflow scheme, the whole network is divided into different data topologies that makes, a sensor node belonging to one topology can communicate and send information only through nodes of the same topology. This division can be done at diferent times. Generaly division takes place at deployment time. If not then the nodes can randomly choose a topology number after deployment phase. The condition in this scheme is that every topology has to cover the sensing area completely. More details in [p91]. Advantages Of this Scheme: In this scheme no need of any additional hard-ware/software is needed to mitigate the attack. There won\'t be any packet loss or delay due to attack due to which packet delivery ratio will be high. Drawbacks: Network cost is high. Network lifetime will be low since due to multi data transmission. If attack occurs in all topologies then there wont be any defense from attack','P45,P91',NULL),(41,'SPTK27','Flooding Attack Prevention','To defend routing protocols against the Ad hoc Flooding attack, we develop a generic secure component, called Flooding Attack Prevention (AP) which can be applied to AODV routing protocol to allow that protocol to resist the rushing attack. Flooding Attack Prevention (FAC), a generic defense against the Ad hoc Flooding Attack. When the intruder broadcasts exceeding packets or Route Request, the immediate neighbors or the intruder record the rate of Route Request. Once the threshold is exceeded, nodes deny any future request packets from the intruder. More details in p49','P49',NULL),(42,'SPTK28','Vulnerability Scan','Mitigation solutions include constant vulnerability scans using malware pattem classification [p50] and risk mitigation services. The pattem classification can be done using the autonomic control loop component of \"Analysis\" following which the autonomic \"execution\" of the mitigation service can be performed','p50',NULL),(43,'SPTK29','Clustering Protocols','Clustering protocols can be used agonist to railures and attacks. The Pertectly anonymous data aggregation protocol p[92] can be used in IoT Application. Clusterng and data aggregation in wireless sensor networks improves scalability, and helps the efficient use of scarce resources. Yet, these mechanisms also introduce some security issues. In particular, aggregator nodes become attractive targets of physical destruction and jamming attacks. In order to mitigate this problem, [p92] propose a new private aggregator node election protocol that hides the identity of the elected aggregator nodes both from external eavesdroppers and from compromised nodes participating in the protocol. p[92] also propose a private data aggregation protocol and a corresponding private query protocol which allows the aggregators to collect sensor readings and respond to queries of the base station, respectively, without revealing any useful information about their identity to external eavesdroppers and to compromised nodes. Others Clustering protocols are discussed in p[5l] and can be applied in IoT applications','P51,P92',NULL),(44,'SPTK30','Risk Assessment','It is fundamental tor the continuing security of the system, by discovering new threats, applying Updates and patches to the firmware on the system devices, as well as providing improvements in the existing security structure. Risk Assessment: b) Finding New Threats, c) Applying Updates d) Applying Patches, e) Providing Improvements and Upgrading Systems.','P60',NULL),(45,'SPTK31','Securing the Premises','Securing the premises is perhaps the most important security feature that IoT needs, as it physically secures the IoT devices, i.e. sensor nodes, computers, firewalls, data servers, etc. The security of the loT devices is achieved by using Physical Barriers to block any unauthorized people, Intrusion Detection systems to monitor any strange benavior, Access Control to make sure only legible users enters the premises of the IoT and even Security personnel to ensure total security of the IoT devices. Securing the IoT Premises: a) Physical Barriers b) Intrusion Detection Alarms c)Monitoring Devices d)Access Control Devices e)Securty Personnel','P60',NULL),(46,'SPTK32','IEEE Standards Solutions','The IEEE provides standard mechanisms for the physical (PHY) and medium access control (MAC) layers which are useul in implementation ot a smart city. There exist three families that can provide low-power and short-range IoT operation for a smart city [7]. IEEE 802.15.4: Important characteristics include real-time quality by guarantying time slots, collision dodging through CSMA/CA and merged assistance for secure communication. Moreove, the devices include power management functions, for example energy detection and link quality. IEEE 802.15.1 is used in Bluetooth. IEEE 802.15.11 This technology is provided from WiFi Alliance, a trade association in control of the certifying products if they adjust to particular standards of interpretability. The WiFi Protected Access (WPA) [56] is a security protocol that has become the regulation for providing security .11 networks. Here by using an already shared encryption key (PSK) or digital certificates, the WPA algorithm Temporal Key Integnty Protocol (TKIP) encrypts information providing authentication to the particular networks. The WPA algorithm (TKIP) further improved upon to the new WPA2 [57] [56] that utilizes more securer encryption algorithm that is Advanced Encryption Standard (AES). Moreover this protocol also uses better and advanced kev distribution techniques., which help in improved session security to avoid eavesdropping','P111',NULL),(47,'SPTK33','Tag Blocking, Tag Sleeping and Selective Blocking','It is important to discuss various techniques and strategies that may play part in better security performance of RFID in a smart city. Privacy protection is an important need and right of the citizens and as discussed previously, that tag killing may play role in privacy protection but this also may lead to loss data permanently. A better option is tag sleeping When the tag does not need to to be read, it is put to sleep temporarily [45]. There is another concept of tag blocking and selective blocking [40].','P111',NULL),(48,'SPTK34','Re-encryption and Minimalist Cryptography','Privacy protection is an important need and right of the citizens and as discussed previously, that tag killing may play role in privacy protection but this also may lead to loss data pemanently. Other techniques include re-labeling approach, re-encryption and minimalist cryptography [45]','P111',NULL),(49,'SPTK35','Data Coding and Multiple Re-Transmission','The interterence problems in the RFID system can be dealt by data coding, multiple re transmission and data integnty check.','P111',NULL),(50,'SPTK36','Hash Lock and Hash Link','Hash-Lock and Hash Link techniques are also important as they provide better authentication. There are other authentication techniques based on hash such as ID exchange and distributed RFID challenge/answer authentication [39]','P111',NULL),(51,'DRTK1','Preventive Measures','It is an Availability and Resilience Perspective tactic of IoT-A. The choice Preventive measure (DC A.15) is aimed at preventing disastrous events, like data-loss, from occurring. To achieve this, data is replicated to have identical copies in reserve in case the original data gets lost. Consistency among the data replicas needs to be assured by the design. To minimize risks the replicas are better stored at different locations that the original data, preferably in the cloud.','P87',2),(52,'DRTK2','Detective Measures','It is a Availability and Resilience Perspective tactic of IoT-A. \"Detective measures (DC A.16) aim at detecting or discovering unwanted events by monitoring indicators for unwanted events, like measured values that exceed a certain range. This strategy requires an Information Model of those unwanted events together with their indicators that are used to detect the unwanted event. The event detection should be operated independent of the subsystem that is monitored to make sure the unwanted events can be detected.','P87',2),(53,'DRTK3','Corrective Measures','It is an Availability and Resilience Perspective tactic of IoT-A. The design choice \"Corrective measures (DC A.17) is aimed at corecting or restoring systems after disastrous events have occured. Assuming the previous two choices have been implemented, meaning the preventive methods have been applied and the disastrous event has been detected corectly, the system can be restored to working order again. Backups of system configurations that have worked corectly before are restored. A configuration history provides the functionality needed for restoring working configurations. The system corection process needs to be operated independently of the system to be restored.','IoT-A',2),(54,'DRTK4','Business Continuity Plan (BCP)','Applyinga Business Continuity Plan meta-model is a way to ensure the ability to operate in spite of unforeseen events and to quickly recover from any type of business interuption. A BCP meta-model formalizes essential aspects and concepts of Business Continuity Management in a socio-technical system. The BCP meta-model is generic enough to be applied to any healthcare organization and Iot Application.','P84',2),(55,'DRTK5','Backup Strategies','A good backup strategy is the best defense against data loss. A backup strategy or backup policy is essentially a set of procedures that you prepare and implement to protect your important digital content from hard drive failures, virus attacks and other events or disasters. Features of a Good Backup Strategy are: a) Able to recover from data loss in all circumstances like hard drive failure, virus attacks, theft, accidental deletes or data entry erors, sabotage, fire, flood, earth quakes and other natural disasters. b) Able to recover to an earlier state if necessary like due to data entry errors or accidental deletes. c) Able to recover as quickly as possible with minimum effort, cost and data loss. d) Require minimum ongoing human interaction and maintenance after the initial setup. Hence able to run automated or semi-automated. Planning Your Backup Strategy: 1) What to Backup. 2) Where to Backup to, 3) When to Backup, 4) Backup Types, 5) Compression and Encryption, 6) Testing your backup and 7) Backup utilities and services.','P85,P86',2),(56,'SCTK1','Dynamic Configuration','Dynamic system reconfigurability can be achieved with replacing the application software or alter its configuration on-the-fly. One method to replace an application from live mote is to utilize dynamic linking and loading to change required application modules. Traditionally most of the configuration of the application is hardcoded to the application binary image, which must be replaced if a configuration change is desired. Replacement of the binary image is costly operation in terms of resource use. If application logic is separated from the configuration it is easier to replace only needed parts of the configuration to change behavior of the application, if the desired change in behavior is small enough so the old application logic can handle the new behavior too. Replacing configuration is also cheaper operation in tems of resource use than replacement of whole binary image. Support for dynamic changes on the system configuration is required so the system can be adjusted for new conditions. Reconfigurable system is also the starting point for development of self-managing system that can adjust its operation automatically in response to changes in its environment.','P1',7),(57,'SCTK2','LEACH','The use of Wireless Sensor Networks (WSNs) is anticipated to bring enomous changes in data gathering, processing and dissemination for different environments and applications. However, a WSN is a power constrained system, since nodes nun on limited power batteries which shorten its lifespan. Prolonging the network lifetime depends on efticient management of sensing node energy resource. Hierarchical routing protocols are best known in regad to energy efficiency. By using a clustering technique hierarchical routing protocols greatly minimize energy consumed in collecting and disseminating data. Low Energy Adaptive Clustering Hierarchy (LEACH) is one of the fundamental protocols in this class. The [p78] proposed Advanced LEACH (A-LEACH), a heterogeneous-energy protocol to decrease probability of failure nodes and to prolong the time interval before the death of the first node (we refer to as stability period) and increasing the lifetime in heterogeneous WSNs, which is crucial for many applications such as ToT applications.','P78',7),(58,'SCTK3','Dynamic Modulation Scaling','Dynamic modulation scaling (DMS) is a dynamic reconfiguration technique at node-level reconfiguration used to reconfigure modulation schemes in communication to achieve energy efficiency in WSN. DMS has been utilized to reduce energy consum ption in wireless communication, where the communication energy was reduced by changing the modulation level of the communication at the cost of increased transmission time. Significant research and development efforts have been made on the scheduling algorithm for DMS to provide significant energy savings while maintaining the time constraints. The [p79] explain some DMS techniques that can be used in loT application.','P79',7),(59,'SCTK4','Dynamic Voltage Scaling (DVS)','Dynamic Voltage Scaling (DVS) Is a dynamic reconfiguration technique at node-level reconfiguration used to reconfigure voltages and operating frequency of processors to achieve energy efficiency in WSN. The utilization of DVS technique required consideration of time constraints because the changes in operating frequency interfered with the computation time given a fixed computation workload. Hence, a scheduling algorithm was usually accompanied with DVS technique to guarantee the time constraint, especially in real-time applications. Researchers have worked on scheduling algorithms for using DVS in different applications. The p[79] explain some DVS techniques that can be used in loT a pplication.','P79',7),(60,'SCTK5','Adaptative Sampling Rate','Adaptive Sampling Rate Is a dynamic reconfiguration technique at node-level reconfiguration used to change the sampling rate of sensors to achieve energy efficiency in WSN.','P80',7),(61,'SCTK6','Intelligent Node Activation',' Intelligent Node Activation is a dynamic reconfiguration technique at network-level reconfiguration used to change sensor node status to achieve energy efficiency in WSN. Intelligent node activation determines node activity to minimize redundant energy usage within the network. It involved redundant deployment of sensor nodes to allow a sensor node to go into sleep mode without degrading network performance. This reduced the overall energy consumption of the network by taking redundant nodes off line and scheduling active/sleep states of the sensor nodes.','P79,P81',7),(62,'SHTK1','SHA Based on MAPE-k loop','Fault tolerance is essential in the IoT. The number of vulnerable systems and attacks will increase, so there is a need to develop intrusion detection and prevention systems to protect the components of the IoT. The growth of connected devices in IoT makes the human intervention less effective. Autonomic computing aims to reduce the human intervention in complex systems, like the human nervous system controls autonomically some functions of body, like the digestive system. The proposed architecture defines five components, distributed between the monitoring phase, analysis phase and knowledge component, to add the property of self-healing into the Internet of Things. The Dendritic Cell Algorithm (DCA) is combined with an Artificial Intelligence component to allow the DCA learning the role of each Infomation sensed. The architecture described in this paper can implement a self-healing system in IoT nodes distributing roles between them in order to ease design of self-healing systems for IoT. Below we can see SELF-HEALING ARCHITECTURE based on MAPE-K loop that can be used in IoT application. More details in [p9]','P9',8),(63,'SHTK2','SHõWA','The complexity of systems is considered an obstacle to the progress of the IT industry. Autonomic computing is presented as the altemative to cope with the growing complexity. It is a holistic approach, in which the systems are able to configure, heal, optimize, and protect by themselves. Web-based applications are an example of systems where the complexity is high. The number of components, their interoperability, and workload variations are factors that may lead to perfomance failures or unavailability scenarios. The occurrence of these scenarios affects the revenue and reputation of businesses that rely on these types of applications. The [p12] presented a self-healing framework for Web-based applications (SH6WA). SH3WA is composed by several modules, which monitor the application, analyze the data to detect and pinpoint anomalies, and execute recovery actions autonomously. The monitoring is done by a small aspect-oriented programming agent. This agent does not require changes to the application source code and includes adaptive and selective algorithms to regulate the level of monitoring. The anomalies are detected and pinpointed by means of statistical corelation. The data analysis detects changes in the server response time and analyzes if those changes are corelated with the workload or are due to a perfomance anomaly. In the presence of perfomance anomalies, the data analysis pinpoints the anomaly. Upon the pinpointing of anomalies, SH3WA executes a recovery procedure. Below we can see the Building blocks of the SHôWA framework that can be used in IoT application. More details in [p12].','P12',8),(64,'SHTK3','ACOSHR','Recent advances in Compact and wireless embedded Systems coupled wvith the technological innovations in Micro Electro Mechanical Systems(MEMS), Wireless Communications and networks paved the way for the development of small, resource constrained devices called Sensor Nodes (SNs). Perfomance of Sensor Node is highly dependent on the effective and efficient usage of the available limited resources with it, leading to maximum lifetime of Wireless Sensor Network (WSN) which is a primary concem of wSNs. The depletion of a SN energy leads to change in topology of WSNs often over a period of time. Therefore, protocols which consider the dynamic nature of WSNs are crucial for improving the netwok lifetime. The [p13] proposed bio inspired Ant Colony optimization based Self healing routing scheme inspired by swam Intelligence technique to improve lifetime of a WSN. ACOSHR finds path by launching a colony of artificial ants that move through wireless links between source and destination. ACOSHR detemines path by considering both the remaining energy in the nodes and shorter lengths using the hop distance. Thus, ACOSHR maximizes the lifetime of the WSN. Below we can see the Flow chart for ACOSHR that can be used in IoT application More details in [p13]','P13',8),(65,'SHTK4','Classical Counter Measures for Self Healing','Security solutions have been classified as either self-protecting or self-healing, in relation to the autonomic mechanism used for mitigation. Self-protecting solutions follow a passive approach and attempt to prevent security threats before they happen. This is done using various cryptographic techniques, with the knowledge of how common attacks are executed. In the case of self-healing solutions, the specific counter- measures for mitigation are taken only after the attack has been detected. Reactive measures are easier to achieve than protective measures, as typically the attacks aim confidentiality, integrity, availability, authenticity or privacy. Nevertheless, it is important to incude protective mechanisms as well supplementing the reactive mechanisms, resulting in what we call as hvbrid schemes. In [p15] is presented countemeasures.','P15',8),(66,'SHTK5','DEEJAM','Jamming is a very effective denial-of-service attack that renders most higher-layer secunty mechanisms mootyet it is often ignored in WSN design. The [p19] showed that an intemupt jamming attack is simple to perpetrate in software using a MICAzmote, is energy efficient and stealthy for the jammer, and completely disrupts communication. Thus, [p19] presented DEEJAM, a novel MAC-layer protocol for defeating stealthy jammers with IEEE 802.15.4-based hardware, to address this problematic area. It layers four defensivemechanisms to hide communication from a jammer, evade its search, and reduce its impact. DEEJAM defeated the other-wise devastating intemupt jammer, and achieves a packet delivery ratio of 88% in the presence ofa pulse jammer. More details in [p19]','P19',8),(67,'SHTK6','Puzzle Schemes','Denial-of-service (DoS) attacks are on the ise in recent years and many cryptographic cient puzzle schemes have been proposed for mitigating such attacks. Nonetheless, these schemes lack a strategy for setting the puzzle difficulty parameter which is an important issue for the legitimate users as they should not be unfairly delayed during low server loads. The [p32]. proposed a leaky bucket rate limiting queue mechanism to set the puzzle difficulty according to a queue delay. This mechanism will rate limit the number of incoming requests to prevent server overloading. As a result, DoS attackers have to spend more time to solve harder puzzles which reduces their rate of attack success. More details in [p32]','P32',8),(68,'FRTK1','MultipathRouting','Active replication in WSN is applied in scenarios where many nodes provide the identical functionality. One example is.a service that periodically provides sensor data. Nodes that run such service activate their sensors and send their analysis to an aggregation service or to a base station. When some of the nodes fail to offer infomation, the receiver still gets the results from other nodes, which is often sufficient. Fault recovery in the presence of active replicas is relatively simple. Multipath routing is Active replication approach. Multipath routing can be used to actively replicate routing paths. In [p93] was proposed an algorithm that calculates the minimum amount of additional nodes and their positions to guarantee k-connectivity between nodes that can be used in IoT application.','P61,P93',5),(69,'FRTK2','Sensor Value Aggregation','Active replication in WSN is applied in scenarios where many nodes provide the identical functionality. One example is a service that periodically provides sensor data. Nodes that run such service activate their sensors and send their analysis to an aggregation service or to a base station. When some of the nodes fail to offer infomation, the receiver still gets the results from other nodes, which is often sufficient. Fault recovery in the presence of active replicas is relatively simple. Sensor value aggregation is Active replication approach. Sensor value fusion is a research area that seeks to provide high level infomation derived from a number of low-level sensor inputs. There, the inherent redundancy of sensor nodes can be used to provide fault-tolerant data aggregation. This is achieved through a tradeoff between the precision (the length) of the resulting sensor reading interval and the number of faulty sensors. This ensures that despite of node failures, the resulting reading interval will contain the comect sensor reading of aregion','P61',5),(70,'FRTK3','Ignore Values from Faulty Nodes','Active replication in \\wSNis applied in scenarios where many nodes provide the identical functionality. One example is aservice that periodically provides sensor data. Nodes that run such service activate their sensors and send their analysis to an aggregation service or to a base station. When some of the nodes fail to offer information, the receiver still gets the results from other nodes, which is often sufficient. Fault recovery in the presence of active replicas is relatively simple. Ignore values from faulty nodes is Active replication approach. A simple but efficient solution to not propagate a failure of one specific node to the entire network is to ignore the data that it is generating. This can be applied like [p94]. The major chalenge in this case is the identification of the malfunctioning nodes.','P61,P94',5),(71,'FRTK4','Self Election','When pasSive replication is applied, the primary replica receives all requests and processes them. In order to maintain reliability between replicas, the state of the primary replica and the request infommation are transfemed to the backup replicas. Given the constraints of WSNs, applications should be designed to have only little or no state at all, which minimizes the overhead for transfering state infomation between nodes or eliminates it all together. Node selection: After it has been established that certain functionality is not available any longer due to failure in the primary replica, a new service provider must be selected. Afte. this selection phase, one or several nodes become service providers. Several approaches to how the selection is perfomed have been proposed and Self election is a approach. Self election: In LEACH [p78], nodes periodically execute a probabilistic algorithm to establish whether they should serve as cluster head to their neighbors. In this probabilistic rotation system, nodes keep changing their role in the network. When a cluster head node fails, it will take only one rotation period until another node starts providing the functionality of the failed or absent node.','P61',5),(72,'FRTK5','Group Election','When passive replication is applied, the primary replica receives all requests and processes them. In order to maintain reliability between replicas, the state of the primary replica and the request infomation are transfered to the backup replicas. Given the constraints of WSNs, applications should be designed to have only little or no state at all, which minimizes the overhead for transfering state information between nodes or eliminates it all together. Node selection: After it has been established that certain functionality is not available any longer due to failure in the primary replica, one or several nodes become service providers. Several approaches to how the selection is perfomed have been proposed and Group election is a approach. In [p95]. a reallocation of nodes that were part of a cluster that suffered a cluster head failure is Proposed. The cluster head, called gateway, is considered to be a resourceful node. The solution presented considers that all the gateways in the network maintain a list of the nodes that are curently in their cluster and another backup list of nodes that could become part of their cluster. When a gateway fails, the nodes from its cluster are reallocated to the other gateways that have the nodes in their backup lists. If more than one gateway has a specific node in its backup list the node is assigned to the cluster head that has the smallest communication cost. new service provider must be selected. After this selection phase,.','P61',5),(73,'FRTK6','Hierarchical Election','When pa5SIve replication is applied, the primary replica receives all requests and processes them. In order to maintain reliability between replicas, the state of the primary replica and the request infommation are transfered to the backup replicas. Given the constraints of WSNs, applications should be designed to have only little or no state at all, which minimizes the overhead for transfering state infomation between nodes or eliminates it all together. Node selection: After it has been established that certain functionality is not available any longer due to failure in the primary replica, a new service provider must be selected. After. this selection phase, one or several nodes become service providers. Several approaches to how the selection is performed have been proposed and Hierarchical election is a approach. Hierarchical election: In a hierarchical election, a coordinator selects the new primary node. This applies to the rebuilding ofrouting paths as well as the selection ofa new cluster head. The fomer describes an algorithm to select the node that is closest to the base station. The latter approach applies fuzzy logic in the base station to select which node will become a cluster head. This algorithm makes use of a fuzzy descriptor, the node concentration, energy level in each node and its centrality with respect to the entire cluster.','P61',5),(74,'FRTK7','Pre-Copy','When passive replication is applied, theprimary replica receives all requests and processes them. In order to maintain reliability between replicas, the state of the primary replica and the request information are transfered to the backup replicas. Given the constraints of WSNs, applications should be designed to have only little or no state at all, which minimizes the overhead for transfeming state information between nodes or eliminates it all together. Service Distribution: During this phase, nodes elected to become service providers must activate the service. In some cases the service is already available on the nodes and a simple configuration change to infom the node that this service should be activated is required. However in some cases, for instance when nodes do not have enough memory to store the code of all potential services, it is necessary to inject code into the node through some technique. There are different techniques that can be used for service distribution: completely reprogramming the node, sending entire blocks of executable code, or sending small pieces of code such as scripts. Pre-Copy: Pre-copying as described in [p96], consists in making the code of all services available on all nodes before deployment. This allows nodes to change their behavior according to the role that they are assigned to.','P61,P96',5),(75,'FRTK8','Code Distribution','When passive replication is applied, the primary replica receives all requests and processes them. In order to maintan reliability between Ieplicas, the state ot the primary replica and the request nfomation are transfered to the backup replicas. Given the constraints of WSNs, applications should be designed to have only little or no state at all, which minimizes the overhead for transfeming state infomation between nodes or eliminates it all together. Service Distribution: During this phase, nodes elected to become service providers must activate the service. In some cases the service is already available on the nodes and a simple configuration change to infom the node that this service should be activated is required. However in some cases, for instance when nodes do not have enough memory to store the code of all potential services, it is necessary to inject code into the node through some technique. Thereare different techniques that can be used for service distribution: completely reprogramming the node, sending entire blocks of executable code, or sending small pieces of code such as scripts Code distribution: Several approaches have been proposed for disseminating code throughout the network. The [p97] is an example for a byte code interpreter for Tiny OS where code is broken into capsules of 24 instructions, called MATE. These capsules can be distributed through the network and installed on nodes, which start to execute thenew code.','P61,P97',5),(76,'FRTK9','Remote Execution','When passive replication is applied, the primary replica receives all requests and processes them. In order to maintain reliability between replicas, the state of the primary replica and the request infommation are transfered to the backup replicas. Given the constraints of WSNs, applications should be designed to have only little or no state at all, which minimizes the overhead for transfering state infomation between nodes or eliminates it all together. Service Distribution: During this phase, nodes elected to become service providers must activate the service. In some cases the service is already available on the nodes and a simple configuration change to infom the node that this service should be activated is required. However in some cases, for instance when nodes do not have enough memory to store the code of all potential services, it is necessary to inject code into the node through some technique. There are different techniques that can be used for service distribution: completely reprogramming the node, sending entire blocks of executable code, or sending small pieces of code such as scripts. Remote Execution: On the one hand code migrations an approach that reduces the amount of memory required in the entire network since not all nodes need to have the application pre-installed, on the other hand it consumes energy on the nodes exchanging the code and is susceptible to link failures, which could cause long delays until the code update is completed. Remote Execution [p98] is an altemative approach where low power devices transfer tasks to more powerful devices without transfenming the entire application code. Instead, only the required state information is transmitted. Such an approach is especially suited for heterogeneous sensor networks with at least some resourceful nodes.','P61,P98',5),(77,'SOTK1','MATÉ Virtual Machine to WSN','Composed of tens of thousands of tiny devices with very limited resources (motes), sensor networks are subject to novel systems problems and constraints. The large number of motes in a sensor network means that there will often be some failing nodes, networks must be easy to repopulate. Often there is no feasible method to recharge motes, so energy is a precious resource. Once deployed, a network must be reprogrammable although physically unreachable, and this reprogramming can be a sign cant energy cost. The [p97] present Maté, a tiny communication-centric virtual machine designed for sensor networks. Maté is high-level interface allows complex programs to be very short (under 100 bytes), reducing the energy cost of transmitting new programs. Code is broken up into small capsules of 24 instructions, which can self- replicate through the network. Packet sending and reception capsules enable the deployment of ad-hoc routn and data a regation algorithms. Maté is concise, high-level program representation simplies programming and allovws large networks to be frequently re-programmed in an energy-eefficient manner, in addition, its safe execution environment suggests a use of virtual machines to provide the user/kemel boundary on motes that have no hardware protection mechanisms. Maté is a virtual machines designed to run on WSN motes. Virtual machines in WSN enable more flexible development and deployment of WSNs by allowing easy updates of software of the motes. The virtual machine.executing the code application softwarehave complete knowledge of the state ofthe application Also the virtual machines can modify the code of the application on execution. So if the virtual machine is smart enough it can adjust behavior of the applications when needed. With virtual machines it is also possible to do dynamically reconfigure the running application. Use of virtual machines are usually more costly on resources than use of native code, due the overheads in computation caused by the virtual machine.','P1,P97',9),(78,'SOTK2','SwissQM Virtual Machine to WSN','Sensor networks are increasingly being deployed for a wide variety of tasks. Today, in these networks, the development, deployment, and maintenance of applications are perfomed largely ad-hoc. Existing platforms help somewhat but also introduce implicit trade-offs. In one extreme, low level programming platfoms and languages make programming cumbersome and eror-prone. In the other extreme, declarative approaches greatly facilitate programming but restrict what can be done. In both cases, additional limitations include lack of support for concurency, difficulties in changing applications, and insufficient abstractions from low-level details. The [p99] presented SwissQM, a virtual machine designed to address all these limitations. SwissQM offers a platform-independent programming abstraction that is geared towards data acquisition and in-network data processing. SwissQMis a virtual machines designed to run on WSN motes. Virtual machines in WSN enable more flexible development and deployment of WSNs by allowing easy updates of software of the motes. The virtual machins.executing the code application softwarehave complete knowledge of the state of the application. Also the virtual machines can modify the code of the application on execution. So if the virtual machine is smart enough it can adjust behavior of the applications when needed. With virtual machines it is also possible to do dymamically reconfigure the running application. Use of virtual machines are usually more costly on resources than use of native code, due the overheads in computation caused by the virtual machinE','P1,P99',9),(79,'DTK1','Self-Diagnosis','The goal of fault detection is to verify that the services being provided are functioning properly, and in some cases to predict if they will continue to function properly in the near future. The simplest method is to perfom visual observation and manual removal of incorect values. This technique offers drawbacks, human interaction leads to errors, it has a high cost and it is not efficient. Hence automatic fault detection techniques for WSN used. Through self diagnosis the node itself can identify faults in its components. Self-Diagnosis: In many cases, nodes can identify possible failures by performing self diagnosis. In [pl00]. the authors propose an approach where a node would perfom a self-diagnosis based on the measurements of accelerometers to detemine if the node suffers from an impact that could lead to hardware malfunctions. Using a similar approach, nodes could detect when they are being moved to a different location. Another approach would be to keep track of the identities of the nodes in the neighborhood. A considerable change in the neighborhood could indicate that either the node itself or some of its previous neighbors have been moved. Faults caused by battery exhaustion can be predicted when the hardware allows the measurement of the current battery voltage [p101]. By analyzing the battery discharge curve and the curent discharge rate, an algornthm can determine an estimation of the time to death of the battery. Nodes can also identify that their curent connection to surrounding nodes is unreliable by probing the link connection therefore identifying that it is isolated.','P61,P100',3),(80,'DTK2','Group Detection','The goal of fault detection is to verify that the services being provided are functioning properly, and in some cases to predict if they will continue to function properly in thee near future. The simplest method is to perfom visual observation and manual removal of incorect values. This technique offers drawbacks, human interaction leads to erors, it has a high cost andit is not efficient. Hence automatic fault detection techniques for WSN used. With group detection, several nodes monitor the behavior of another node. Group Detection: The detection of services failing due to incorectly generated values is only possible ifa reference value is available. In [p102] a detection mechanism is proposed to identify faulty sensor nodes. Algorithm is based on the idea that sensors from the same region should have similar values unless a node is at the boundary of the event-region. The algorithm start by taking measurements of all neighbors of a node and uses the results to calculate the probability of the node being faulty. In [p103]. amisbehavior detection algorithm to aid the routing layer is proposed. The misbehavior detection mechanism is based on the idea of monitoring the communication of the service provider to verify whether messages are forwarded corectly. Focusing on providing a fault-tolerant approach for clusters in WSNs, in [p95] it is proposed to support the dymamic recovery of failed gateways. The proposed protocol assumes that a gateway has failed only when no other gateways can communicate withit. The fault detection mechanism is based on constant status updates being exchanged between gateways and further use of a consensus algorithm.','P61,P102,P103,P95',3),(81,'DTK3','Hierarchical Detection','The goal of fault detection is to verify that the services being provided are füunctioning properly, and in some cases to predict if they will continue to function properly in the near future. The simplest method is to perfom visual observation and manual removal of incorect values. This technique offers drawbacks, human interaction leads to erors, it has a high cost and it is not efficient. Hence automatic fault.detection techniques for WSN used. Hierarchical detection the fault detection is perfomed using a detection tree where a hierarchy is defined for the identification of failed nodes. Often in a hierarchical detection the detection is shifted to a more powerful device such as the sink Hierarchical Detection: In [104] was proposed the usage of the network topology to forward the fault detection results of child nodes to their parent nodes and finally to sink nodes. Every node forwards the condition of the child nodes that it is monitoring to their parent node. The parent node camies out an aggregation operation on the outcomes of the child nodes together with its own results and forwards it to the further process. The proposed approach scales well with the network size, but it consumes resources of the network. Shifting the fault detection job to a more powerful device is an altemative that can help to increase the lifetime of the WSN. In [p105]. was proposed an algorithm that puts the burden of detecting and tracing failed nodes to the base station. At first the nodes find out the network topology and send their part of the topology nfomation to the sink node. With this information the base station leams the complete network topology which is used to send route updates quickly as it detects that nodes become silent. This approach is not applicable to event-driven WSN because in such a network sensors only send messages when there is an event that should be reported, for instance when the temperature goes above In [p106]. was proposeda mechanism that uses a hierarchical network topology where cluster heads monitor ordinary nodes, and the base station monitors the cluster heads. To perfom the monitoring. the base station and the cluster heads constantly ping those nodes that still have battery power left and that are under their direct supervision. Ifa node does not respond, it is marked as failed. In [p107] was proposed a debugging tool that also utilizes the hierarchical detection approach. This tool instruments the WSN with monitoring software on the sensor nodes that generates metrics data that is forwarded to a centralized sink location for analysis. With this infomation consideration is able to detect faults and failures and identify the fault that generated the failure.','P61,P104,P105,P106,P107',3),(82,'DTK4','Intrusion Detection System','An intrusion detection system is a sottware tool used to detect unauthonzed access to a computer system or network. An intrusion detection system is capable of detecting all types of malicious network traffic and computer usage. This incudes network attacks against vulnerable services, data driven attacks on applications, host-based attacks-such as privilege escalation, unauthorized logins and access to sensitive files-and malware. An intrusion detection system is a dynamic monitoring entity that complements the static monitoring abilities ofa firewall. An intrusion detection system monitors traffic in a network in promiscuous mode, very much like a network sniffer. The network packets that are collected are analyzed for rule violations by a pattem recognition algorithm. When rule violations are detected, the intrusion detection system alerts the administrator. The [p89] show same types of IDS that can be used in IoT application. Bellow we can see the organization of a generalized intusion detection svstem More details in [p89]','P3,P4,P67,P89',3),(83,'DTK5','DoS detection architecture for 6LoWPAN','Smart objects connected to the Intemet, constituting the so called Intemet of Things (loT), are revolutionizing human beings interaction with the world. As technology reaches everywhere, anyone can misuse it, and it is always essential to secure it. In [p6] was presented a denial-of-service (DoS) detection architecture for 6LoWPAN, the standard protocol designed by IETF as an adaptation layer for low-power lossy networks enabling low-power devices to communicate with the Intemet. The proposed architecture integrates an intrusion detection system (IDS) into the network framework developed within the EU FP7 project ebbits. The aim is to detect DoS attacks based on 6LoWPAN. More details in [p6].','P6',3),(84,'DTK6','SVELTE','In the Internet of Things (loT), resource-constrained things are connected to the unreliable and untrusted Intermet via IPvó and 6LoWPAN networks. Even when they are secured with encryption and authentication, these things are exposed both to wireless attacks from inside the 6LoWPAN network and from the Intemet. Since these attacks may succeed, Intrusion Detection Systems (TIDS) are necessary. Currently, there are no IDSs that meet the requirements of the IPv6-connected IoT since the available approaches are either customized for Wireless Sensor Networks (WSN) or for the conventional Intemet. In [p10] was designed, implemented, and evaluated a novel intrusion detection system for the IoT that is called SVELTE. It can detect routing attacks such as spoofed or altered infomation, sinkhole, and selective-forwarding. However, the approach can be extended to detect other attacks. More details in [p10]','P10',3),(85,'DTK7','Intrusion Detection of Sinkhole Attacks in WSN','In [p33], is presented an Intrusion Detection System designed for wireless sensor networks and show how it can be configured to detect Sinkhole attacks. A Sinkhole attack foms a serious threat to sensor networks.','P33',3),(86,'DTK8','Sinkhole Attack Detection Mechanism','In [p34]. is proposed a detection scheme for sinkhole attacks in wireless sensor networks. Sinkhole attack makes flowing packets to pass through attacker. As a consequence, Sinkhole attack can be extended to various kinds of attacks. the[p34] analyzed sinkhole attack methods in the networks that use LQI based routing. It showed that the detection of sinkhole attack can be achieved by using a few detector nodes.','p34',3),(87,'DTK9','Protocol to detect Sybil Attacks','Vehicular ad hoc networks (VANETs) are being increasingly advocated for traffic control, accident avoidance, and management of parking lots and public areas. Security and privacy are two major concems in VANETs. Unfortunately, in VANETs, most privacy-preserving schemes are vulnerable to Sybil attacks, whereby a malicious user can pret end to be multiple (other) vehicles. In [p37], was presented a lightweight and scalable protocol to detect Sybil attacks. In this protocol, a malicious user pretending to be multiple (other) vehicles can be detected in a distributed manner through passive overhearing by set of fixed nodes called road-side boxes (RSBs). The detection of Sybil attacks in this manner does not require any vehicde in the network to disclose its identity, hence privacy is preserved at all times. More details in [p37].','P37',3),(88,'DTK10','Sybil Attack Detection in MANETs','Fully self-organized mobile ad hoc networks (MANETS) represent complex distributed systems that may also be part of a huge complex system, such as a complex system-of-systems used for crisis management operations. Due to the complex nature of MANETs and its resource constraint nodes, there has always been a need to develop lightweight security solutions. Since MANETs require a unique, distinct, and persistent identity per node in order for their security protocols to be viable, Sybil attacks pose a serious threat to such networks. A Sybil attacker can either create more than one identity on a single physical device in order to launch a coordinated attack on the network or can switch identities in order to weaken the detection process, thereby promoting lack of accountability in the network. In the [p40] is proposed a lightweight scheme to detect the new identities of Sybil attackers without using centralized trusted third party or any extra hardware, such as directional antennae or a geographical positioning system.','P40',3),(89,'DTK11','Anomaly Detection Systems','As advances in networking technology help to connect the distant comers of the globe and as the Intermet continues to expand its infuence as a medium for communications and commerce, the threat from spammers, attackers and criminal enterprises has also grown accordingly. It is the prevalence of such threats that has made intrusion detection systems the cyberspace\'s equivalent to the burglar alam-join ranks with firewalls as one of the fundamental technologies fornetwork security. However, today\'s commercially available intusion detection systems are predominantly signature- based intusion detection systems that are designed to detect known attacks by utilizing the signatures of those attacks. Such systems require frequent rule-base updates and signature updates, and are not capable of detecting unknown attacks. In contrast, anomaly detection systems, a subset of intrusion detection syst ems, model the nomal system/network behavior which enables them to be extremely effective in finding and foiling both known as well as unknown or \"zero day\" attacks. While anomaly detection systems are attractive conceptually, a host of technological problems need to be overcome before they can be widely adopted. These problems include: high false alam rate, failure to scale to gigabit speeds, etc. The [p89] provides technological trends in anomaly detection that can be used in IoT application.','P89',3),(90,'DTK12','CADE: Cumulative Acknowledgeme nt based Detection','Wireless sensor networks are networks consisting of nodes with sensors to monitor physical or environmental conditions. Since nodes in wireless sensor networks have limited transmission capabilities, packets are generally transmitted to the destination node through several immediate nodes. However, ifa malicious node is present on a route through which packets are forward ed, attackers can deliver selective forwarding attacks by simply dropping packets. Selective forwarding attacks can be serious threats on many applications including networks for military surveillance and health-care monitoring. Previous countemeasures to selective forwarding attacks cannot identify Malicious nodes or require time synchronization. The [p43] presents a detecting scheme which identifies malicious nodes delivering selective forwarding attacks without the need for time synchronization. The scheme also provides security against sinkhole attacks where attackers try to attract more trafficto malicious nodes.','P43',3),(91,'DTK13','Defensive technique for selective forwarding attack in localization','In selective forwarding attack, malicious nodes may refuse to forward certain messages and simply drop them, ensuring that they are not propagated any more. Similarly, in sensor localization, a malicious node may refuse to forward the location information or drops them, with confimation that they are not propagated further. In [p44]. is proposed a defensive technique for selective forwarding attack in localization. It consists of 3 phases for secure infomation delivery. First phase is secret sharing of infomation, secondly randomized propagation of each information share, and finally minhop routing towards the anchor nodes. Each time an infomation packet needs to be sent, the packet is broke into t shares according to threshold secret sharing algorithm. When the anchor nodes collect at least t shares, original packet are reconstructed. Through simulation results, it is shown that this is effective defensive technique for selective forwarding attack.','P44',3),(92,'DTK14','Detection using acknowledgmen ts for selective forwarding attack','In the [p45] is showed a scheme which uses a multi-hop acknowledgment scheme to launch alams by obtaining responses from intemediate nodes. Each node in the forwarding path is incharge of detecting malicious nodes.','P45',3),(93,'DTK15','Detection Scheme in Hetrogeneous Networks for selective forwarding attack','In the [p45] is showed a scheme to detect selective forwarding using a Heterogeneous Sensor Net work(HSN) model. The HSN consists of powerfül high-end sensors(H-sensors) and large number of low-end sensors(L-sensors). After deploying sensors, a cluster formation takes place with H-sensor as cluster head.','P45',3),(94,'DTK16','Detection Using Two hop Neighbourhood Infomation','Wireless sensor networks have many potential applications for both civil and military tasks. However, WSNs are susceptible to many types of attacks because they are deployed in open and unprotected environment. Selective forwarding attack is one of the easiest implement and damaged attacks in multi- hop routing protocols. In [p108], was proposed a lightweight detection algorithm based only on the neighborhood information. The detection algorithm can detect selective forwarding attack with high accuracy and little overhead imposed on detection modules than previous works. More details in p108','P45,P108',3),(95,'AAK1','Autonomic Architecture for IoT Gateway','With the advancement taking place in communication technologies., Internet of Things (IoT) is expected to play a major role in realizing smartness and functionality needed for applications such as Smart Homes and Electrical Smart Grids. However, in order to achieve that far reaching goal, select concepts of computing autonomy have to be suitably ported to IoT architecture. Recently reported works describe various frameworks, models and protocols for computing autonomy. Some others focus more on the practical Implementation of autonomy using self-star (self-) behavior in end nodes. The [p14] proposed an Autonomic architecture for IoT based on IBM\'s autonomic framework. In traditional wireless networks employed today for IoT, a Master Gateway Device (GWD), router or an access-point (AP), are commonly intertacing the wireless devices with the internet in a single-hop Configuration. The IoT Mobile Node Devices (MND) may either use IEEE 802.15.4 or IEEE 802.11 as their communication standard, but they still require a master gateway for establishing connection to other devices over the Internet. A single user is expected to own a multitude of these IoT devices, and deploy them for various sensing of data for monitoring purposes and sending instruction signals down the devices for actuating purposes. The IoT devices are supposed to be highly heterogeneous in nature and have varying requirements and functionalities which tend to increase the complexity of the network. In this case, a network will be fomed when at-least one MND manages to register successtully with a GWD. A large number of MNDs registering to the network creates problem of scalability, especially when it comes to reconfiguration issues according to the network requirements. The design of the solution is thus to fulfill the self-configuration of the network components. A modular, object oriented design is more scalable and can be easily deployed, changed and improved. IBM\'s autonomic framework is highly modular, and consequently configuration management tends to achieve high levels of modularity needed in the extension of services exercises. The [p14] design follows the same objectives and a highly abstracted architectural framework is presented. Bellow we can see the overall component architecture and their dependencies. More details in [p14].','P14,P2',1),(96,'AAK2','Gateway System Architecture','In [p82] was presented an intelligent architecture which consists of a large number of sensing objects for monitoring purposes that can be used in IoT application. An embedded-based gateway for use in a monitoring system was proposed in an IoT network. The gateway is a critical component for collecting. recording and forwarding data obtained from sensors. Itjs programmable, low-cost, real-time and flexible. The software and hardware for wired and wireless communication interfaces are successful and suitable for field trials. More details in [p82]','P82',1),(97,'AAK3','Autonomic Computing IBM Framework','TBM p[83] has introduced a framework of autonomic computing which is aimed to make the management of systems easier. The framework consists of two functionally important entities, namely, (1) Managed Resource and (2) Autonomic Manager. The managed resource is the less complex entity. In an IoT setup, the managed resource is the end device, and comprises of sensors and effectors. Sensors are responsible to sense the environment and are merely data collectors. On the other hand, effectors are the interfaces that the device can use to manipulate the environment. The device thus provides access to the sensors and effectors through the \'manageability interface\'. The autonomic manager is the highly complex entity and provides the central control and analysis. The functionality is broken down modularly in a control loop which is implemented by the autonomic manager component. As seen in the Figure bellow, the functioning of the control loop is divided into four parts. The monitor part is responsible to colect details from an element, to aggregate, filter, manage, and report all the data. The analyze part provides mechanisms modeling thus complex situations. This allows the autonomic manager to learn about the environment and predict future situations. The plan module provides further mechanisms to guide the action with the help of policies, in order to achieve goals and objectives. Lastly, the execute module controls execution of a pre-defined plans. More details in [p83].','P83',1);
/*!40000 ALTER TABLE `resilient_solution` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `resilient_solution_enum`
--

DROP TABLE IF EXISTS `resilient_solution_enum`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `resilient_solution_enum` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(250) DEFAULT NULL,
  `acronym` varchar(10) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `resilient_solution_enum_acronym_uindex` (`acronym`)
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `resilient_solution_enum`
--

LOCK TABLES `resilient_solution_enum` WRITE;
/*!40000 ALTER TABLE `resilient_solution_enum` DISABLE KEYS */;
INSERT INTO `resilient_solution_enum` VALUES (1,'Autonomic Architecture Kind','AAK'),(2,'Disaster Recovery Technique Kind','DRTK'),(3,'Detection Technique Kind','DTK'),(4,'Energy Efficient Technique Kind','EETK'),(5,'Fault Recovery Technique Kind','FRTK'),(6,'Redundancy Technique Kind','RTK'),(7,'Self Configuration Technique Kind','SCTK'),(8,'Self Healing Technique Kind','SHTK'),(9,'Self Optimization Technique Kind','SOTK'),(10,'Self Protection Technique Kind','SPTK');
/*!40000 ALTER TABLE `resilient_solution_enum` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `threat_type`
--

DROP TABLE IF EXISTS `threat_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `threat_type` (
  `id` int NOT NULL AUTO_INCREMENT,
  `IoTCriticalObjects` varchar(255) DEFAULT NULL,
  `iot_threat_id` varchar(255) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `description` text,
  `reference` varchar(1000) DEFAULT NULL,
  `ResilientSolutionIds` varchar(255) DEFAULT NULL,
  `threat_type_enum` int DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `threat_type_iot_threat_id_uindex` (`iot_threat_id`),
  KEY `threat_type_threat_type_enum_id_fk` (`threat_type_enum`),
  CONSTRAINT `threat_type_threat_type_enum_id_fk` FOREIGN KEY (`threat_type_enum`) REFERENCES `threat_type_enum` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=388 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `threat_type`
--

LOCK TABLES `threat_type` WRITE;
/*!40000 ALTER TABLE `threat_type` DISABLE KEYS */;
INSERT INTO `threat_type` VALUES (233,'DVC TAG SSR ATT ODRSC','PLTT1','Tampering','Tampering is essentially an attack on contidentiality and availability. Data tampering occurs when an attacker modifies, adds, or deletes data in the end device itself. In such attacks, the end device is compromised by physically capturing a node from the network. The attacker can collect all infomation and try to recover beneficial infomation. An advanced attacker can recover, reprogram and redeploy it in the field to attack the network. An attacker can study the type and fomat of data that is being transmitted by Iol devices, and attempt to tamper and generate the same. In such a case, the accuracy of the data generated by the network is questionable. An autonomic scheme for self- protection based on device identities, and proper authentication, is needed to preserve the integrity of data. The MAPE architecture can be implemented as follows. The system can monitor for suspicious data being generated by the nodes, and periodic checks could be made to see whether the node has been compromised. Based on this control data, the system can mitigate it by dropping the data generated by the suspicious node. For example, if the system detects possible capture, it may remotely instruct the node to delete any data stored on the device, such as security keys and synchronization data. This can significantly delay and prevent attempts at reverse-engineering. In the scheme by [p24] the primary concept is that neither the keys nor any usable data are stored on a RFID tag, and thus capture of a node will results in little or no damage to the syst em. Tampering is classified as a low threat category, but highly affects the integrity of data.','P15','SPTK17  SPTK30  SPTK31  DTK4  DTK11  (Others countemeasures: P15 p9 p24)',5),(234,'DVC  TAG  SSR  ATT','PLTT2','Jamming','Jamming simply means to exploit the transmission of a radio signal to interfere with the radio frequencies being used by the sensor network. Jamming can be perfomed either continuously or in an intemittent way, in both the cases, network will suffer from considerable damage. Jamming attack is usually camied out during the operational phase. Jamming takes place at link-level by sending forged packets to create collisions, thereby, dropping legitimate packets. Jamming is an attack on availability and renders the wireless spectrum to be unusable for the constituent devices. The threat level from jamming based attacks can be considered very high in IoT due to the characteristic of remote, unmonitored deployment of Iol devices. Jamming mitigation approaches fall traditionally under self-healing paradigm. Jamming is classified as a physical layer attack in which the radio frequencies are disturbed by use of interference and saturated with noise signals which effect the transmission of legitimate signals. Signal jamming of radio frequency channels results in a DoS attack and is prevented by a proper monitoring of cognitive spectrum,and eventually distributing the usage across the available spectrum. In the popular techniques of jamming mitigation, autonomic behavior is manifest and can be further developed as follows. Wireless sensors such as sniffers usually collect details about Received Signal Strength ndicator (RSSI) values and similar wireless infomation from the environment. This represents the \"Monitor\" phase of the MAPE architecture. These details are compared with known pattems and extreme values for specific paramet ers, such as an abnomally high RSSI values in a specitic frequency of the spectrum. Once a possible jamming attack is suspected, the appropriate mitigation method is planned, and then executed by the effector. In the technique by [p20], instead of monitoring the RSSI values, analysis of the hearing range of the wireless nodes inside the jammer area is done. The execution of mitigation can follow different foms as well. Some methods attempt to neutralize the jammer signals by cancellation [p21] and by switching the usage in other portions of the spectrum [p22], whereas some merely attempt to localize the jammer for further action [p23]. Some methods are also specifically designed to cater for problem s in specific access control methods. As an example, DEEJAM [pl19] attempts to mitigate jamming attacks specifically in IEEE S02.15.4 standard based wireless networks.','P15','SPTK1 SHTK5 SPTK33 SPTK34 SPTK35 SPTK36 SPTK30 SPTK31 DTK4 DTK11 (Others countemeasures P9p20, p21.p22, p23,p15)',5),(235,'DVC TAG SSR ATT SMCAM','PLTT3','Deactivation','This refers to the physical destruction of the node or unauthorized application of a kill\" command. Deactivation results in loss of availability in the network We can imagine the following scenario to appreciate the need of mitigation methods against deactivation. Smart cities are filled with IoT devices, to sense and actuate, and are in the danger of being destroyed or stolen by people. This can redefine modem day cyber vandalism to a new level. An attacker can also attempt to enter the intertace of the node. and trv to shutdown. or kill the devicekrom network\'s perspective. both these attacks will lead the node to stop being detected, and cease to function. Password protection as well as physical security measures such as camouflage can provide some respite. However, a large scale application of this attack will result in the network falling apart and perhaps DoS may result in multi- hop environments. Deactivation can be classitied as a high impact attack in the wisdom that perhaps there are no software methods that can effectively prevent it. Remote triggering of the kill command can be disabled, but a physical damage cannot be. The only way out is to protect the node from extemal infuences by enclosing in a protective case. Monitoring the status of IoT devices is important, which also includes monitoring the physical condition of the nodes. It may be argued that autonomic computing does not exactly fit as a possible solution for this attack, as the scope is more physical and is not affected by soft ware mechanisms. However, monitoring the status and analysis of such data could help the user reduce the downtime of the system. The MAPE architecture could monitor the loss of any node, and then assign its offered services to some other node in the network, such that overall service levels are maintained. That would be one manner, where self-healing could be demonstrated for deactivation. Electromagnetic Interference (EMI) is a type of threat to IoT applications that occurs when the electromagnetic fields generated by one device interfere with the operation of another device. EMI can be caused by a variety of sources, including other electronic devices, power lines, and radio waves. When two electronic devices are in close proximity to each other, the electromagnetic fields they generate can interact with each other. This can cause interference that can disrupt the operation of one or both devices. For example, if an IoT device that uses wireless communication is located near a microwave oven, the electromagnetic field generated by the microwave oven can interfere with the wireless signal, causing the IoT device to malfunction or lose connectivity. EMI can also be caused by external sources, such as power lines or radio waves. Power lines can generate strong electromagnetic fields, which can interfere with nearby electronic devices. Radio waves can also cause EMI, particularly if they are in the same frequency range as the device\'s operating frequency. To mitigate the risk of EMI in IoT applications, it is important to carefully design devices and systems to minimize electromagnetic interference. This can include using shielding to protect devices from external sources of EMI, as well as designing devices to minimize their own electromagnetic emissions. It is also important to test devices and systems in real-world environments to identify and address any EMI issues that may arise.EMI can affect the performance of IoT sensors and cause data loss or device failure.','Mathur, P. and Raman, S., 2020. Electromagnetic interference (EMI): Measurement and reduction techniques. Journal of Electronic Materials, 49, pp.2975-2998.','SPTK30 SPTK31 DTK4 DTK11 (Other countemeasures: P15.p9)',5),(236,'RSC DVC TAG SSR ATT SMCAM','PLTT4','Collision','Collision is similar to the jamming attack, as the loss of data packets happens by virtue of simultaneous existence of signals in the concemed spectrum. Collision may also occur intrinsically in a large network due to problems in the design of synchronization and transmission times. Transmitted data packets can be disrupted by the malicious users transmitting asynchronously that can result in a checksum mismatch or back-off in some MAC protocols. An attacker listens on the communication medium and guesses the expected time of message transmission. The attacker then sends a message at the same time when a proper message is started which results in collision of the message in the wireless medium. Repeated cycles of collision can result in a DoS attack and affect the availability. In IoT, there is a high probability of collision due to co-existence of many protocols in the WIFI 2.4 GHz band [p25]. Monitoring RSSI values such as in jamming mitigation is not of much use, as attacker\'s signals are more dynamic and stealthier. An autonomic system can recover by dynamically adapting with a variable flow control mechanism for collision mitigation due to a jammer. Autonomic self-healing for collision recovery by random number based mechanisms [p261]','P15','SPTK17 SPTK30 SPTK31 DTK4 DTK11 (Others countemeasures: P15.p9. p26)',5),(237,'DVC TAG SSR ATT SMCAM','PLTT5','Exhaustion','Exhaustion results as an after-effect of some attacks. Devices on batteries can be energv exhausted if the network faces continuous collisions and DoS attacks. In many M2M MAC layer protocols, collision results in repeated attempts at re-transmission, which highly drains the battery resources. Solutions of rate limitation and a timer can help prevent exhaustion in end nodes. Exhaustion could be a result of other attacks, which aim to exhaust the energy resources. Exhaustion is classified under DoS for high impact attacks and has been linked to the deactivation attacks. The linkage is due to the common pattem of the pemanent removal of nodes from the network with a common goal to reduce the network size. Common mitigation methods include rate limitation, use of timers, cognitive adaptation, as well as cross layer designing [p27]. Autonomic decisions may inchude deciding on duty cycling methods and cognitive adaptation. The system will not only protect the availability but also help in prolonging the lifetime of the network.','P15','SPTK30 SPTK31 DTK4 DTK11 (Others countemeasures P15.p9, P27)',5),(238,'RSC DVC TAG SSR ATT','PLTT6','De-synchronization and replay','Request tor retransmission of missed frames can be made by repeatedly forcing messages into the network which cary sequence numbers to one or both end points. Time Division Multiple Access (TDMA) based schemes are particularly vulnerable and few countemeasures are explained by [p28]. In this scenario, separate methods exist for single hop networks and multi-hop networks. Replay is mostly an attack on synchronization whereby an attacker stores previously transmitted data and repeats it at a later time to mislead the receiver node. Many authentication mechanisms are immune against the replay attack, and lessons can be leamt in order to design an autonomic secure system. Smple encryption of data can also be an etfective means against the replay attack. Replay attack could thus be considered as the easiest attack to be mitigated. It has been placed in a high risk category as failure of mitigation can lead to the downfall of the efficiency in the network. The [p30] mitigates the replay attack by dynamically changing the session key upon fulfillment of certain conditions.','P15','SPTK17 SPTK30 SPTK31 DTK4 DTK11 SPTK22 (Others countermeasures P28, p29.p30)',5),(239,'DVC TAG SSR ATT ODRSC SMCAM','PLTT7','Signal Interference','A Denial of Service attack can be implemented on any RFID tag by creating and sending noise signals over the Radio Frequency signals which are used by the RFIDs for communication. The noise signals will interfere with the RFID signals hindering communication.','P60','SPTK33 SPTK34 SPTK35 SPTK36 SPTK30 SPTK31 DTK4 DTK11 (Others countermeasures: p60)',5),(240,'DVC TAG SSR ATT','PLTT8','Malicious Node Injection','The adversary can physically deploy a new malicious node between two or more nodes of the lol\' system, hence controlling all data flow from and to the nodes and their operation, this is also known as Man in The Middle Attack.','P60','SPTK30 SPTK31 DTK4 DTK11 (Others countermeasures: p60)',5),(241,'DVC TAG SSR ATT SMCAM','PLTT9','Physical Damage','The adversary can physically damage devices of the IoT network for his own gain. This kind of attack is an attack that deals with security of the area or building that hosts the IoT System. It differs from Node Tampering attack as in this situation the adversary tries to directly damage the IoT system with the purpose of impacting the availability of service.','P60','SPTK30 SPTK31 DTK4 DTK11 (Others countemmeasures: p60)',5),(242,'DVC TAG SSR ATT','PLTT10','Sleep Deprivation Attack','Most sensor nodes in the Iol system are powered by replaceable batteries and are programmed to follow sleep routines to extend their battery life. This attack, keeps the nodes awake which will result in a more power consumption, and will cause the nodes to shut down.','P60','SPTK30 SPTK31 DTK4 DTK11 (Others countemeasures: p60)',5),(243,'TAG','PLTT11','Abuse of Tags','The size of RFID tag is small making it cost efficient. As RFID tag can be embedded into various functions, so the margin for establish security protection system is very little due to its small size. The RFID tags are prone to illegal use by unauthorized users. Moreover the communication between RFID tag and RFID reader is done through a unique Electronic Product Code (EPC), which may be sabotaged by the attacker if they collect the EPC. Another problem is detaching the tag. In this case the transponders, that identify the tagged items in the RFID system, may be associaDVCted to some other thing and may be detached from its tag.','P111','SPTK33 SPTK34 SPTK35 SPTK36 SPTK30 SPTK31 DTK4 DTK11 SPTK19',5),(244,'TAG','PLTT12','Tag Killing','The size of RFID tag is small making it cost efticient. As RFID tag can be embedded into various functions, so the margin for establish security protection system is very little due to its small size. The RFID tags are prone to illegal use by unauthorized users. Moreover the communication between RFID tag and RFID reader is done through a unique Electronic Product Code (EPC), which may be sabotaged by the attacker if they collect the EPC. Another problem is deta ching the tag. In this case the transponders, that identify the tagged items in the RFID system, may be associated to some other thing and may be detached from its tag','P111','SPTK33 SPTK34 SPTK35 SPTK36 SPTK30 SPTK31 DTK4 DTK11 SPTK19',5),(245,'DVC TAG SSR ATT','PLTT13','Sabotage of Readers','One of the big security issue for RFID is sabotage of the reader. If the attacker gets control of the RFID reader, it can be sabotaged thus emitting some electromagnetic waves to destroy the data in the RFID tag.','P111','SPTK33 SPTK34 SPTK35 SPTK36',5),(246,'DVC TAG SSR ATT SMCAM','PLTT14','Attacks on Data Confidentiality','There are various crypt-analysis attacks that cause threats to data confidentiality on a WSN during information sending and receiving.','P111','SPTK30 SPTK31 DTK4 DTK11',5),(247,'DVC TAG SSR ATT SMCAM','PLTT15','Attacks to Data Integrity','The data may be abused, changed and modified due to various attacks.','P111','SPTK30 SPTK31 DTK4 DTK11',5),(248,'RSC NRSC ODRSC ATT SMCAM','PLTT16','Unauthorized Access','An attacker can access to WSN resources to obtain the keys for malicious purposes.','P111','SPTK30 SPTK31 DTK4 DTK11 SPTK19',5),(249,'DVC TAG SSR ATT','PLTT17','Malicious Code Injection','The attacker compromises a node by physically injecting it with malicious code that would give him access to the IoT system, e.g. imagine an attacker inserting a USB stick with harmful software (i.e. virus) onto the node. This would mean that the attacker could gain full control of the node or even control of the whole system.','P60','SPTK30 SPTK31 DTK4 DTK11 (Others countermeasures: p60)',5),(250,'DVC TAG SSR ATT ODRSC SMCAM','NTT1','Earthquakes','Natural threat that could cause severe damage to IoT application. Few safeguards can be implemented against natural disasters, and nobody can prevent them from happening. Disaster recovery plans like backup and contingency plans are the best approaches to secure svstems against natural threats','P66','DRTK FRTK',4),(251,'DVC TAG SSR ATT ODRSC SMCAM','NTT2','Hurricanes','Natural threat that could cause severe damage to lol application. Few safeguards can be implemented against natural disasters, and nobody can prevent them from happening. Disaster recovery plans like backup and contingency plans are the best approaches to secure svstems against natural threats','P66','DRTK FRTK',4),(252,'DVC TAG SSR ATT ODRSC SMCAM','NTT3','Floods','Natural threat that could cause severe damage to lol application. Few safeguards can be implemented against natural disasters, and nobody can prevent them from happening. Disaster recovery plans like backup and contingency plans are the best approaches to secure sVstems against natural threats','P66','DRTK FRTK',4),(253,'DVC TAG SSR ATT ODRSC SMCAM','NTT4','Fire','Natural threat that could cause severe damage to lol application. Few safeguards can be implemented against natural disasters, and nobody can prevent them from happening. Disaster recovery plans like backup and contingency plans are the best approaches to secure systems against natural threats.','P66','DRTK FRTK',4),(254,'DVC TAG SSR ATT ODRSC SMCAM','NTT5','Power Outage','Power outage is a natural threat that could cause severe damage to IoT application. Some lol devices consume power directly from the power grid and a drop in power grid may affect them. Redundant Power, Disaster recovery plans like backup..contingency plans are the best approaches to secure IoT application.','P66','DRTK FRTK RTK7',4),(255,'DVC TAG SSR ATT','HTT1','Energy Limitations','A typical IoT healthcare network incudes small health devices of limited battery power (eg., body temperature and BP sensors). Such devices conserve energy by switching on the power-saving mode when no sensor reading needs to be reported. In addition, they operate at a low CPU speed if there is nothing important to be processed.','P66','SCTK SHTK3 SHTK5 DTK1',2),(256,'DVC TAG SSR ATT','HTT2','Memory Limitations','Most ol healthcare devices have low on-device memory. Such devices are activated using an embedded operating system (OS), system software, and an application binary. Therefore, their memory may not be sufficient to execute complicated security protocols.','P66','FRTK9',2),(257,'DVC TAG SSR ATT ODRSC SMCAM','HTT3','Natural Wear','A long period of use and exposure to hostile environments can cause hardware to wear out and lead to malfunction.',NULL,'FRTK',2),(258,'DVC TAG SSR ATT ODRSC SMCAM','HTT4','Malfunction/Faulty Hardware','A long period of use and exposure to hostile environments can cause hardware to wear out and lead to malfunction. Malfunctioning IoT tags can cause errors in the system or disrupt communication. ',NULL,'FRTK DTK1 AAK',2),(259,'DVC TAG SSR ATT','HTT5','Computational Limitations','IoT health devices are embedded with low-speed processors. The central processing unit (CPU) m such devices is not very powerfül in tems of its speed. In addition, these devices are not designed to perfom computationally expensive operations. That is, they simply act as a sensor or actuator. Therefore, finding a security solution that minimizes resource consumption and thus maximizes security perfomance is a challenging task.','P66','AAK',2),(260,'DVC TAG SSR ATT','HTT6','Mobility','In general, healthcare devices are not static but mobile in nature. Such devices are connected to the Intemet through IoT service providers. For example, a wearable body temperature sensor or a heart monitor may be connected to the Intemet and notifies the concemed caregiver of the user\'s conditions. Such wearable are connected to the home network when the user is at home, whereas they are connected to the office network when he or she is at office. Different networks have different security configurations and settings. Therefore, developing a mobility-compliant security algorithm is a serious challenge.','P66','AAK',2),(261,'DVC TAG SSR ATT','HTT7','Scalability','The number of lol devices has increased gradually, and therefore more devices are getting connected to the global infomation network. Therefore, designing a highly scalable security scheme without compromising security requirements becomes a challenging task.','P66','AAK',2),(262,'DVC TAG SSR ATT','HTT8','Communications Media','In general, health devices are connected to both local and global networks through a wide range of wireless links such as ZigBee, Z-Wave, Bluetooth, Bluetooth Low Energy, Wi-Fi, GSM, WiMax, and 3G/4G. Wireless channel characteristics of these networks make traditional wired security schemes less appropriate. Therefore, it is difficult to find a comprehensive security protocol that can treat both wired and wireless channel characteristics equally.','P66','DTK2',2),(263,'DVC TAG SSR ATT','HTT9','Multiplicity of Devices','Health devices within an IoT health network are diverse, ranging from füll-edged PCs to low-end RFID tags. Such devices vary according to their capability in temms of their computation, power, memory, and embedded soft-ware. Therefore, the challenge lies in designing a security scheme that can accommodate even the simplest of devices.','P66','DTK1',2),(264,'DVC TAG SSR ATT NRSC SMCAM','HTT10','Battery Low','device begins to fail in their functions because the battery is running low','P66','SCTK SHTK3 FRTK DTK1',2),(265,'RSC DVC TAG SSR ATT ODRSC','NLTT1','Hello Flood','Some routing protocols require nþdes to broadcast hello messages to announce themselves to their neighbors.. A node which receives such a message may assume that it is within a radio range of the sender and attempt to use the route as a communication path. However an attacker with large enough transmission power could convince every other node in the network that the attacker is its neighbor. This will lead to far away nodes sending the packets to the attacker which will be lost. The work by Singh [p31] presents some countemeasures. This is a fundamental issue when it comes to acknowledgment based systems. However, acknowledgments are usually in the dominion of a powerful host with sufficient energy resources. For routing mechanisms, unequal transmission radio of legitimate nodes may also result in a hello flood. This attack has been classified as a low impact attack on availability. Autonomic mitigation mechanism may include use of authentication, and puzzle schemes such as des cribed by [p32]','P15','SPTK30 SPTK31 DTK4 DTK11 (Others counteme asures: P31, p32. pl5, p9)',3),(266,'RSC DVC TAG SSR ATT ODRSC','NLTT2','Sink Hole','An adversary attracts a central node and compromises it leading to loss in availability. This leads to message drops and even a DoS attack. An intrusion detection system (IDS) is described by [p33] particularly to detect the sinkhole attack for the Mint Route protocol. Furthemore, the IDs by [p34] is able to detect the sinkhole attack for network s using link quality indication (LQI) based routing protocol. An autonomic system, however, demands reactive measures to be taken once the detection has occured. The risk level in this case is very high as compared to the tampering attack where just a handful of end nodes are compromised. Not only can all the data be sniffed, but the network could be controlled if it is infrastructure based. Autonomic methods may include the use of distributed architecture and use of authentication [p35]','P15','SPTK30 SPTK31 DTK4 DTK11 DTK7 DTK8 DTK12 (Others counteme asures p34, p35)',3),(267,'RSC DVC TAG SSR ATT ODRSC','NLTT3','Sybil Attack','In a Sybil attack, a single node creates its own multiple identities and presents it to other nodes in the network using them to gain a disproportionately large influence. This will result in removal of all original neighbors from the table of active sensor nodes in the routing table. System\'s vulnerability to a Sybil attack depends on how easily identities can be generated. It also depends on the degree of reputation to which the system accepts inputs from entities that do not have a chain of trust linking them to a trusted entity. The local Sybil resistance scheme (LSR) attempts to detect Sybil attacks particularly in the use case of vehicular networks [p36]. Vehicular networks seem to be the hot topic as a use-case for research in Sybil attacks. [p36] also discussed the availability of a road side unit (RSU) to help counter and detect the attack. Work by [p37] also focuses on vehicular networks and aims to detect the Sybil attack through a distributed, work load and passive overhearing. They attempt to preserve privacy while doing the same, and claim minimal overhead and network delay. The work by [p39] discusses three requirements for defenses against a Sybil attack in a vehicular network. First, any proposed scheme should protect the infomation about the nodes, and thereby preserve privacy. Second, the response time of the counter measure should be immediate. Finally, a verifier should be employed to prevent the Sybil attack to automatically adapt towards the prevention schemes. Lessons from autonomic computing can contribute highly to the third requirement. They propose Sybil Guard which portrays the use of these requirements and sets a limit to the number of false identities that can be initiated by a malicious user. Sybil Limit is proposed by [p38] from the same research group which improves upon the concepts set by earlier by adopting and including a social based setup. Mobility is considered by [p36] and by [p37] specifically in the case of vehicular networks in the form of moving cars etc. The work by [p40]. however, presents a light weight scheme, residing in the lower layers, with support for mobility and variable transmit powers as well. The detection is based on rules such as the ule for values of RSSI for new nodes that attempt to join. This mechanism, however, might not apply in all cases as the analysis is solely on the first RSSI values, which a knowledgeable, powerful malicious node might easily by pass.','P15','SPTK30 SPTK31 DTK4 DTK11 SPTK23 DTK10 (Others countemme asures P36, p37 p38p 39.p40)',3),(268,'RSC DVC TAG SSR ATT ODRSC','NLTT4','Selective Forwarding/Gray Hole','Certain malicious nodes can refuse to forward some messages and just drop them. This can result in delay and bandwidth degradation in the whole network. Thus, confidentiality and availability are compromised. Probing and redundancy checks can be the possible solution. Many soutions have been proposed which range from providing detection to a complete recovery. Others focus on lessening the damage caused. A scheme which detects and recovers the network has been proposed by [p41]. With a claimed accuracy of over 95%, the scheme employs a messaging based watemark technique to keep track of the forwarded path. This scheme however, claims to result in network delay due to the cost of processing. The work by [p42] focuses on the Ad Hoc On-Demand Distance Vector (AODV) and similar routing protocols before proposing a scheme that consists of two phases of detection and localization. They use packet counters to keep track of a series of control messages which are passed through the wvireless nodes. Another method temed CADE, also makes use of acknowledgement based detection but eliminates time synchronization requirements [p43].| CADE makes use of cumulative techniques and claims to reduce overhead. Another technique by [p44] breaks the information packets into a multitude of smaller pieces, propagated along specific paths and then the decision of malicious node presence is made. A complete survey on the proposed solution for this attack has been conducted by [p45]. The common mitigation measures which can benefit from autonomic practices incude probing, redundancy, and message based detection [p46].','P15','SPTK30 SPTK31 DTK4 DTK11 DTK12 DTK13 DTK14 DTK15 (Others counteme asures P41.p42.p 43.p44.p4 5.p46)',3),(269,'RSC DVC TAG SSR ATT ODRSC NRSC SMCAM','NLTT5','Eavesdropping and Traffic Analysis','The eavesdropping attack and traftic analysis act as a pre -requisite to many other attacks, and usually the transmitter and the receiver are unaware of the presence of this attack. Eavesdropping and traftic analysis are classitied as either passive or active. In passive eavesdropping. the attacker detects communication traftīc by listening to the transmission medium, and processes it to extract vital infomation. On the other hand, in active eavesdropping. the attacker sends control data as queies to initiate specitic processes and replies from the destination device. The reply is further used in the analysis to pave the way for other attacks. It is hard to decide on whether eavesdropping should be grouped under M2M, Network or Cloud attack since data can be eavesdropped at levels of communication. Eavesdropping on data in the M2M layer is easy, but not as beneficial as the adversary can only eavesdrop on selected portions of the system, and the raw data may not be particularly useful. Wireless IoT devices are heavily prone to eavesdropping. On the other hand, eavesdropping on data in the Cloud layer is essentially the most profitable, as context infomation is included as well. However, the ease of implementing an eavesdropping attack on the Network layer makes it suitable for this category. Eavesdropping could be active or passive, depending upon whether the sniffed data is just monitored for information, or used for initiating another attack. The MITM attack is an example of an active eavesdropDing attack. Here. the adversary makes independent connections with the source and destination devices, acting as a router, and transfers messages between them. In this process, data is captured, understood and modified. Eaves dropping on a new device that is attempting to join a network may allow the attacker to observe control data. This can further allow the attacker to generate messages impersonating other devices, and to manipulate and understand how the network topology is built.','P15,P16','SPTK3 SPTK4 SPTK5 SPTK32 SPTK33 SPTK34 SPTK35 SPTK36 SPTK30 SPTK31 DTK4 DTK11 (Others counterme asures P47.p48)',3),(270,'TAG','NLTT6','RFID Spoofing','An attacker spoofs an RFID signals to read and record a data transmission from an RFID tag. Then the attacker can send his own data containing the original tag ID, making it appear to be valid, hence the attacker gains full access to the system pretending to be the riginal source.','P60','SPTK33 SPTK34 SPTK35 SPTK36 SPTK30 SPTK31 DTK4 DTK11 (Others countemme asures p60)',3),(271,'TAG','NLTT7','RFID Cloning','An attacker clones an RFID tag by copying data from the victims RFID tag, onto another RFID tag. Although the two RFID tags have identical data, this method does not replicate the original ID of the RFID, making it possible to distinguish between the original and the compromised, unlike the event in the RFID spoofing attack.','P60','SPTK30 SPTK31 DTK4 DTK11 (Others counteme asures p60)',3),(272,'TAG','NLTT8','RFID Unauthorized Access','Because of the lack of proper authentication mechanisms in the majority of RFID systems, tags can be accessed by anyone. This automatically means that the attacker can read, modify or even delete data on the RFID nodes.','P60','SPTK33 SPTK34 SPTK35 SPTK36 SPTK30 SPTK31 DTK4 DTK11 (Others counteme asures p60)',3),(273,'RSC DVC TAG SSR ATT ODRSC NRSC','NLTT9','Man in The Middle Attack','The attacker over the netwok manages to intertere between two sensor nodes, accessing restricted data, violating the privacy of the two nodes by monitoring. eavesdropping and controlling the communication between the two sensor nodes. Unlike the Malicious Node Injection from the Physical Attacks category, the attacker does not necessarily need to be physically there for this kind of attack to be successful, but relies solely on the network communication protocols of an IoT system.','P60','SPTK32 SPTK30 SPTK31 DTK4 DTK11 SPTK22 (Other counteme asures p60)',3),(274,'RSC DVC TAG SSR ATT ODRSC SMCAM','NLTT10','DoS/DDoS in Network Layer','A Denial of Service (DoS) attack is an attack with the purpose of preventing legitimate users from usinga specitied network resource such as a website, web service, computer system or an IoT Service. A Distributed Denial of Service DDoS) attack is a coordinated attack on the availability of services of a given target system or network that is launched indirectly through many compromised computing systems p17). A typical Distributed Denial of Service (DDoS) attack uses a large number of compromised hosts to perfom this attack by sending packets that have no purpose, besides generating attack traffic, to disrupt the service [p18]','P60,P6,P17,P18','SHTK6 SPTK2 SPTK32 SPTK33 SPTK34 SPTK35 SPTK36 SPTK30 SPTK31 DTK4 DTK11 (Others counterme asures p60, p3 p4, p6 p7,p9, p10)',3),(275,'RSC DVC TAG SSR ATT ODRSC','NLTT11','Routing Information Attacks','These are direct attacks that the adversary by spooting, altening or replaying routing intomation can complicate the network and create routing loops, allowing or dropping traftic, sending false error messages, shortening or extending source routes or even partitioning the network, e.g. Hello Attack and Black hole Attack.','P60',' SPTK30 SPTK31 DTK4 DTK11 (Others counteme asures p60)',3),(276,'RSC DVC TAG SSR ATT ODRSC NRSC SMCAM','NLTT12','Network Errors','Network erors are environmental erors caused by the communication channel and basically reter to package losses on the transmission path or comupted incoming packages on the receiving path.','P69','SPTK30 SPTK31 TK4 DTK11',3),(277,'RSC DVC TAG SSR ATT','NLTT13','Timing Errors','Timing erors are erors that can occur either at the beginning of the communication as a result of the impossibility to establish a connection, or during the communication flow when for example the response time of the called exceeds the response time expected by the caller.','P69','SPTK30 SPTK31 DTK4 DTK11',3),(278,'RSC DVC TAG SSR ATT ODRSC','NLTT14','Interaction Errors','Interaction errors are caused by incompatibilities at the communication protocol stack level, secunty, workflows or timing. These are the most common erors in inter-Clouds and IoT infrastructures because all these conditions appear while unning the applications and the environmental and interaction states cannot be reproduced during the application testing phases. For complex applications it can be observed a high probability of interaction eror occurence. Some of these, as for example the ones due to different security levels, could be isolated and eliminated during the testing phases in a high percentage, as there are a limited number of calls between virtual organizations.','P69','SPTK17 SPTK30 SPTK31 DTK4 DTK11',3),(279,'RSC DVC','NLTT15','Side Channel Attacks','Using particular techniques Le. Timing. Power, Fault and Electromagnetic Analysis) on the encryption devices of an IoT system, the attacker can retrieve the encryption key being used for encrypting and decrypting data.','P60','SPTK32 SPTK30 SPTK31 DTK4 DTK11',3),(280,'RSC DVC TAG SSR ATT ODRSC','NLTT16','Cryptanalysis Attacks','These attacks assume the possession of cipher text or plaintext and their purpose is to find the encryption key being used by breaking the encryption scheme of the system. Examples of cryptanalysis attacks on ToT systems include Known-plaintext attack, Chosen-plaintext attack, Chosen Cipher text attack,and Cipher text-only attack.','P60','SPTK33 SPTK34 SPTK35 SPTK36 SPTK30 SPTK31 DTK4 DTK11',3),(281,'RSC DVC TAG SSR ATT ODRSC SMCAM','NLTT17','Man in The Middle','When two users of an IoT system A and B, exchange keys during a challenge-response scenario, so as to establish a secure communication channel, an adversary positions himself between them on the communication line. The adversary then intercepts the signals that A and B send to each other and attempt to interfere by perfoming a key exchange with A and B separately. The adversary will then be able to decrypt/encrypt any data coming from A and B with the keys that he shares with both of them. Both A and B will think that they are talking with each other.','P60','SPTK30 SPTK31 DTK4 DTK11',3),(282,'RSC DVC TAG SSR ATT ODRSC SMCAM','NLTT18','ACK Attack','An ACK attack is a TCP based attack. TCP (Iransmission Control Protocol) is a highly reliable host-to-host protocol. TCP uses sequence numbers and acknowledgements of packets, which allows for retransmission upon loss of packets. When two processes want to communicate, a so called three-way handshake initializes the connection between them. A SYN packet is sent first, which is answered by a SYN-ACK. The SYN-ACK packet is an acknowledgement of the SYN packet. The SYN-ACK gets answered by an ACK, which concludes the initialization. For an ACK attack, a TCP connection needs to be established between the attacker and the target device. The attacker sends packets with the ACK-bit enabled and a forged source address. This forged source address is also called a spoofed IP address. The target device will then drop these packets, as the device does not have established connections with the host of the spoofed IP address. The drop of these packets causes resource exhaustion as each packets has to be processed, resulting in a denial of service. [p18]','P18','SPTK32 SPTK30 SPTK31 DTK4 DTK11',3),(283,'RSC DVC TAG SSR ATT ODRSC','NLTT19','CHARGE N Attack','The Character Generator Protocol (CharGen) was created as an useful debugging and measurem ent tool. It is either used as a TCP based or an UDP based character generator service. UDP based CharGen attacks are used more than TCP based CharGen attacks, as TCP needs to have a connection established while UDP does not. The attacker sends a packet from a spoofed IP address to a device that has CharGen enabled, and the response will be sent to the target device. This response can have a maximum size of 512 bytes according to the specifications. The standard port CharGen uses is port 19 [p18]','P18','SPTK32 SPTK30 SPTK31 DTK4 DTK11',3),(284,'RSC DVC TAG SSR ATT ODRSC','NLTT20','DNS Attack','The Domain Name System (DNS) is used to provide a mechanism where resources are named in such a way that names can be used instead of having to remember IP addresses. DNS makes use of DNS resolvers to retrieve the infomation associated with a domain name. The standard port DNS uses is port 53. In a DNS amplification attack, attackers use open DNS resolvers. They send DNS lookup requests with a spoofed source address to these resolvers. The DNS resolver responds to these packets by sendng a DNSrecord response, which is sent to the target device instead of the device of the attacker. Such a response is generally much larger than the query, which contains only the domain. A response can include many different records of infomation for a domain. [p18]','P18','SPTK32 SPTK30 SPTK31 DTK4 DTK11',3),(285,'RSC DVC TAG SSR ATT ODRSC','NLTT21','ICMP Attack','The Intemet Control Message Protocol (ICMP) is a protocol used for sending eror messages, for example when a gateway does not have the buffering capacity to forward a packet or when a packet cannot reach its destination. A function that usually is implemented in ICMP is the ping function. Ping is used to detemine if a path exists between two hosts. This is mostly used to check if another host is up. ICMP allows for ECHO request and ECHO reply messages to be sent. When pinging an other host, an ECHO request is sent, which is answered with an ECHO reply by the other host. If an ECHO reply is not received, the other host is probably down or does not support the ping functionality. An ICMP flood overwhelms the target device with ICMP Echo Request packets which are sent very fast without waiting for a reply from the target device. The target device often tries to answer these packets with ICMP Echo Reply packets, resulting in a consumption of both outgoing and incoming bandwidth [p18]','P18','SPTK32 SPTK30 SPTK31 DTK4 DTK11',3),(286,'RSC DVC TAG SSR ATT ODRSC','NLTT22','NTP Attack','The Network\' lime Protocol (NTP) is used to synchronize clockS on the Intemet. NIP uses mechanisms to combine the statistics of multiple NTP servers to detemine the time in UTC. These statistics are requested by sending queries. The standard port NTP uses is port 123. In older versions of NTP, one of these queries is \"monlist\". This request retums a list of the last 600 hosts that have made a connection to the server. The attacker requests this query with a spoofed source address, resulting in a considerably larger response with the list being sent to the target device. [P18]','P18','SPTK32 SPTK30 SPTK31 DTK4 DTK11',3),(287,'RSC DVC TAG SSR ATT ODRSC','NLTT23','SSDP Attack','The User Datagram Protocol (UDP) allows processes to send messages to each other with a minimum of protocol mechanics. Itis not a reliable protocol, the protocol is transaction oriented and does not guarantee delivery, duplicate protection or ordering. The Simple Service Discovery Protocol (SSDP) makes use of UDP as its underlying protocol. SSDP is a protocol often used in Universal Plug and Play (UPnP) devices. It provides a mechanism which can be used to discover devices, making use of multicast to send a HTTP UDP discovery request. When a device receives such a discovery request, it responds with an unicast UDP response. The standard port SSDP uses is port 1900. In an attack abusing SSDP, the Simple Object Access Protocol (SOAP) is used to deliver specifically created packets to UPnP devices, which elicits an response with amplified packets that can be reflected to the target.','P18','SPTK32 SPTK30 SPTK31 DTK4 DTK11',3),(288,'RSC DVC TAG SSR ATT ODRSC SMCAM','NLTT24','SYN Attack','ASYNHood is a TCP based attack. In this attack, the target device receives SYN packets from the attacker at a high packet rate, trying to initiate the TCP three-way handshake. The target device responds to these packets by sending SYN-ACK packets that needs to be answered with an ACK packet as explained above. The attacker does not answer the target host\'s SYN-ACK packet either by not responding with the required ACK packet, or by having sent the first SYN packet from a spoofed IP address. The target device will wait for the ACK packets to amive, allocating resources to these half-open connections, until no new connections can be made.','P18','SPTK32 SPTK30 SPTK31 DTK4 DTK11',3),(289,'RSC DVC TAG SSR ATT ODRSC','NLTT25','UDP Floods Attack','In this attack, the attacker sends a large number of UDP packets to random ports at the target device. The device will respond by checking the application listening at that port. Upon finding no application listening at those ports, the target device responds with an ICMP Destination Unreachable packet. This process of receiving, checking and answering results in the target device being overwhelmed and unreachable.','P18','SPTK32 SPTK30 SPTK31 DTK4 DTK11',3),(290,'RSC DVC TAG SSR ATT ODRSC','NLTT26','UDP Fragment Attack','This attack uses IP ragmentation to attack the target. IP tragmentation is a process where iP packets are broken down, sent across the network and reassembled at the receiver. In an UDP fragment attack, the attacker sends forged packets that have a big enough size to be fragmented and reassembled. As these packets are fake, the target device cannot reassemble them. This force the target device to allocate resources to try to reassemble these packets until the device is overloaded. Akamai states that some of the recorded fragmented UDP packets were the direct result of an amplification by other forms of DDoS attacks','P18','SPTK32 SPTK30 SPTK31 DTK4 DTK11',3),(291,'RSC DVC TAG SSR ATT ODRSC','NLTT27','TCP Anomaly Attack','TCP makes use of Flags in its packets to indicate how the packet should be handled. The TCP anomaly attack counts are TCP floods that Akamai classified as using uncommon or anomalous TCP Flags. These are usually the result froma combination of coding emors and modifications aimed to use TCP packets in attacks. In most of the cases, the attacker makes use of a SYN Flood where the flags have been modified in such a way that the SYN flag is not the only flag set.','P18','SPTK32 SPTK30 SPTK31 DTK4 DTK11',3),(292,'RSC DVC TAG SSR ATT ODRSC','NLTT28','RIP Attack','Kouting ntomation Protocol version I RIP) 1s a protocol to dynamically share route infomation on a small network quickly and easily. This protocol makes use of pot 520. RIP was introduced in 1988 and its Request For Comments (RFC) is now listed as a historic document, which means this protocol is deprecated. Using a list of known RIPvl routers on the intemet, attackers can craft a request query that is broadcasted as nomal. The attacker makes use ofa spoofed IP address, resulting in the response being sent to the target.','P18','SPTK32 SPTK30 SPTK31 DTK4 DTK11',3),(293,'RSC DVC TAG SSR ATT ODRSC','NLTT29','RESET Attack','This attack is a TCP attack. As mentioned before, TCP makes use of flags to indicate how a packet should be handled. One of the flags is the \"RST Flag. Setting this flag indicates that the connection must be teminated. In a RESET attack, the attacker takes over the connection between to hosts. The attacker then sends packets with the RST Flag set to one, or both, of the hosts. This teminates the connection between the two hosts, which is a denial of service.','P18','SPTK32 SPTK30 SPTK31 DTK4 DTK11',3),(294,'RSC DVC TAG SSR ATT ODRSC','NLTT30','Physical Attacks','These attacks include using modified softwares for the purpose of fraud. The main breaches that occur due to these attacks are in integrity of data and M2M softwares.','P111','SPTK32 SPTK30 SPTK31 DTK4 DTK11',3),(295,'RSC DVC TAG SSR ATT ODRSC','NLTT31','Attacks on Authentication Tokens','The threats include physical attacks as discussed above and side-channel attacks. The authentication tokens can also be cloned for malicious purposes.','P111','SPTK32 SPTK30 SPTK31 DTK4 DTK11',3),(296,'RSC DVC TAG SSR ATT ODRSC','NLTT32','Bandwith Degradation','Bandwidth degradation may eftect the information flow and prone to abuse of data.','P111','SPTK30 SPTK31 DTK4 DTK11',3),(297,'RSC DVC TAG SSR ATT ODRSC','NLTT33','False Data Attacks','False data [49] injection attacks are very powerful attacks against the state estimation in the power grid. In this case the hacker takes advantage of the configuration of a power system to launch malicious attacks by infusing wrong data to the monitoring center questioning data integrity.','P111','SPTK30 SPTK31 DTK4 DTK11',3),(298,'RSC DVC TAG SSR ATT ODRSC','NLTT34','Attacks on Privacy','Privacy of smart grid communication systems is important as it is the main concem and right of the consumers. Smart grid communications should take care of the privacy during communication in real time.','P111','SPTK30 SPTK31 DTK4 DTK11',3),(299,'RSC DVC TAG SSR ATT ODRSC','NLTT35','Threats From Bluetooth','Wireless devices show their existence and pemit unrequested connections and in case the end users do not know how to manage and configure their bluetooth settings properly.',NULL,'SPTK30 SPTK31 DTK4 DTK11',3),(300,'RSC DVC TAG SSR ATT ODRSC','NLTT36','Location Privacy And GPS','The location privacy of individuals can be sabotaged by the attackers by various attempts on the GPS feature provided in the smart-phone.',NULL,'SPTK30 SPTK31 DTK4 DTK11 SPTK19',3),(301,'RSC DVC TAG SSR ATT ODRSC','NLTT37','Threats Through WiFi','Attacker on a Smartphone can catch information during the communication between Smartphone and Wi-Fi hotspots. The main problem is extreme vulnerability of the Wi-Fi hotspot architecture where there is no enryption to protect transmitted data',NULL,'SPTK30 SPTK31 DTK4 DTK11 SPTK22',3),(302,'SVC RSC ODRSC NRSC','ALTT1','Response Error','Response erors are caused by a service, which retums values outside of the expected boundaries by the caller. In such situations, components have to be able to validate a certain response and to appropriately handle the exceptions.','P69','SHTK2 SPTK30 SPTK31 DTK4 DTK11 (Others countemea sures: P69)',1),(303,'DVC','ALTT2','Flooding','The attacker can exhaust mportant resources like battery by sending the victim many connection establishment requests. Ad hoc layers have received some attention for mediating the flooding attack in p49]. Here, [p49] present an ad-hoc flooding attacks that aims to exhaust node resources and band- width. The coresponding proposed solution is able to recover bandwidth automatically and save resources but may not be able to stop the interference caused by the intruder broadcasting continuously. Flooding has been linked to hello flood based attack as they resemble in the methodology for attack Furthemore, this has not been dassified as a high risk attack as IoT end device will be rarely employing transport layer based advanced mechanisms of TCP. UDP instead is not highly vulnerable as connection is not established. IoT communication within transport layer is expected to be majorly connectionless. This attack on availability can be easily mitigated by setting traditional connection establishment bammers as a part of autonomic self-protection measures.','P15','SPTK30 SPTK31 DTK4 DTK11 SHTK2 (Other countermea sures: P49)',1),(304,'SVC ADA RSC NRSC ODRSC SSR','ALTT3','Malware','This is an attack on confidentiality of infomation. Malware traditionally refers to the application of viruses, worms and Trojans to interfere with the system. Malware attacks have been included in this study as vulnerable mobile phones and other high end devices are also a part of the IoT. Malware may not affect the sensor based motes but significant risk may exist for sink s/gate-ways being represented as applications in the mobile phones. Bluetooth devices may be at risk more than the other technologies such as 802.15.4. Mitigation solutions incude constant vulnerability scans using malware pattem classification [p50] and risk mitigation services. The pattem classifīcation can be done using the autonomic control loop component of \"Analysis following which the autonomic \"execution\" of the mitigation service can be perfommed.','P15,P60','SPTK30 SPTK31 DTK4 DTK11 SHTK2 (Other countermea sures: P15.p9.p50 p60)',1),(305,'DVC','ALTT4','Spoofing And Message Forgin','Spoofing occurs when an attacker successfully impersonates a node. A data transmission may be recorded from the node by someone with a suitably programmed portable reader. Duing re-transSmission it appears to be a valid node. However it is not to be mistaken for cloning, as there is no actual node involved, just a much bigger and powerful portable machine. Spoofing has been classified as a high level risk because of the method of the attack. Spoofing attack may not just be limited to the application layer, but can exist in all layers. Spoofing is an attack primarily on authentication, and impersonation of nodes defeats the principles of privacy as well [P51]. For IoT, research is needed to mitigate the spoofing attacks in an autonomic manner. Message forging, on the other hand is can attack where the adversary creates a new message or modifies an existing message to deliver different| content. n the speCific case of modification of synchronization messages, message forging can be considered as a form of the replay attack.','P15','SPTK30 SPTK31 DTK4 DTK11 SHTK2 (Other countemmea sures P15.p9,P51)',1),(306,'RSC DVC','ALTT5','Intersection','The intersection attack, also known as the composition attack is focused on defeating the privacy of the system by focusing on auxiliary infomation of a system. This infomation is gained from other channels such as web or third part public records. It targets the non linkability element of the privacy infomation model. An adversary makes use of anonymized data from different sources, and attempts to link them. Schemes such as by [p52] exist based on \"k-anonymity\" techniques to mitigate the effect of the intersection attack.','P15','SPTK30 SPTK31 DTK4 DTK11 SPTK17 SHTK2 (Other countemea sures: P52)',1),(307,'SVC ADA RSC NRSC ODRSC ATT SSR','ALTT6','Malicious Scripts','Usually the IoT network is connected to the Intemet. The user that controls the gateway can be fooled into running executable active-x scripts which could result in a complete system shut down or data theft. Cross-Site Scripting (XSS) attacks can inject malicious code into the web interface of IoT sensors and compromise the security of the system.','P60','SPTK30 SPTK31 DTK4 DTK11 SHTK2 (Other countemea sures: p60)',1),(308,'SVC ADA RSC NRSC ODRSC','ALTT7','Denial of Service in Application Layer','An attacker can execute DoS or distributed denial of service DDoS attacks on the affected IoT network through the application layer, affecting all users in the network. This kind of attack can also block the legitimate users from the application layer giving full application layer access to the attacker, databases and private sensitive data.','P60','SPTK30 SPTK31 DTK4 DTK11 SHTK2 (Other countermea sures: p60)',1),(309,'SVC RSC ODRSC TAG','ALTT8','Social Engineering','The attacker manipulates users of an lol system, to extract pnvate infomation or to pertom certain actions that would serve his goals. This kind of attack is put under the physical attacks category because the attacker needs to physically interact with the IoT network users to achieve his goals.','P60','SPTK30 SPTK31 DTK4 DTK11 (Other countemea sures: p60)',1),(310,'SVC ADA RSC ODRSC NRSC','ALTT9','Botnets','Botnet is fomed by attackers by contaminating multiple devices with malwares that victimize broadly through theee-mail attachments or from smart applications or malicious websites','P111','SPTK30 SPTK31 DTK4 DTK11',1),(311,'ATT','ALTT10','Data Breache','Data breaches can be a significant threat to IoT actuators. If a cybercriminal gains access to the data stored in an IoT actuator, they could potentially manipulate or control the device, causing it to perform actions that were not intended by the owner. This could lead to serious consequences, such as physical damage, financial loss, or even endangering human lives. In addition, a data breach could also result in the theft of sensitive information, such as personal or financial data, which could be used for identity theft or other malicious purposes. Therefore, it is essential to implement robust security measures to protect IoT actuators from data breaches.;','Moganedi, S., 2018, June. Undetectable data breach in iot: Healthcare data at risk. In 17th European Conference on Cyber Warfare and Security (Vol. 2, p. 296).',NULL,1),(315,'ATT ODRSC','ALTT11','Injection Attacks','Attackers may inject malicious code or data into the IoT actuator, causing it to execute unauthorized commands or behave in unexpected ways.','Panchal, A.C., Khadse, V.M. and Mahalle, P.N., 2018, November. Security issues in IIoT: A comprehensive survey of attacks on IIoT and its countermeasures. In 2018 IEEE Global Conference on Wireless Computing and Networking (GCWCN) (pp. 124-130). IEEE.',NULL,1),(316,'ATT','ALTT12','Insider Attacks','Insider attacks are a type of threat to IoT actuators that occur when someone with authorized access to the system, such as an employee or contractor, intentionally or unintentionally misuses their access privileges to cause harm to the system or steal sensitive information. In the context of IoT actuators, insider attacks could involve an authorized user intentionally manipulating the actuators to cause damage to the system or steal data, or an unauthorized user gaining access to the system through an insider\'s credentials and carrying out similar actions. To mitigate the risk of insider attacks, it is important to implement strong access controls, regularly monitor user activity, and provide security awareness training to all employees and contractors with access to the system.','Khan, A.Y., Latif, R., Latif, S., Tahir, S., Batool, G. and Saba, T., 2019. Malicious insider attack detection in IoTs using data analytics. IEEE Access, 8, pp.11743-11753.',NULL,1),(317,'ATT SSR','ALTT13','Ransomware','Ransomware is a type of malware that encrypts the victim\'s data and demands payment in exchange for the decryption key. In the context of IoT actuators, ransomware can be a serious threat because it can effectively disable the actuators and prevent them from functioning properly. For example, an attacker could use ransomware to encrypt the data being sent to an IoT actuator controlling a critical system, such as a power grid or a hospital\'s life support system. This could cause significant disruption or even harm to individuals who depend on these systems. To mitigate this threat, it is important to implement strong security measures, such as firewalls, intrusion detection systems, and anti-malware software, to prevent ransomware from infecting the IoT system. In addition, regular backups of critical data can be used to restore the system in the event of a ransomware attack.','Humayun, M., Jhanjhi, N.Z., Alsayat, A. and Ponnusamy, V., 2021. Internet of things and ransomware: Evolution, mitigation and prevention. Egyptian Informatics Journal, 22(1), pp.105-117.',NULL,1),(318,'ATT NRSC','ALTT14','Remote Code Execution (RCE)','Remote Code Execution (RCE) is a type of cyber attack that can be a threat to IoT actuators. It occurs when an attacker is able to execute arbitrary code on a remote system, allowing them to take control of the system and potentially manipulate the actuators connected to it. In the context of IoT actuators, an attacker could use RCE to execute code on a vulnerable device and manipulate the actuators to perform unauthorized actions, such as turning off critical systems or causing physical damage. To mitigate the risk of RCE attacks, it is important to implement secure coding practices, such as input validation and sanitization, and regularly update and patch software to address known vulnerabilities. Additionally, it is important to implement network segmentation and access controls to limit the potential impact of a successful attack.','Bier, S., Fajardo, B., Ezeadum, O., Guzman, G., Sultana, K.Z. and Anu, V., 2021, April. Mitigating remote code execution vulnerabilities: a study on tomcat and android security updates. In 2021 IEEE International IOT, Electronics and Mechatronics Conference (IEMTRONICS) (pp. 1-6). IEEE.',NULL,1),(319,'ATT NRSC','ALTT15','SQL Injection','SQL injection is a type of cyber attack that can be a threat to IoT actuators. It occurs when an attacker sends malicious SQL commands to a database through an application that does not properly validate user input, allowing the attacker to execute unauthorized SQL commands and potentially gain access to sensitive data or control the actuators.  In the context of IoT actuators, an attacker could use SQL injection to manipulate the actuators to perform unauthorized actions, such as turning off critical systems or causing physical damage. To mitigate the risk of SQL injection attacks, it is important to implement secure coding practices, such as input validation and parameterized queries, and regularly update and patch software to address known vulnerabilities. Additionally, it is important to implement network segmentation and access controls to limit the potential impact of a successful attack.','Uwagbole, S.O., Buchanan, W.J. and Fan, L., 2017, May. Applied machine learning predictive analytics to SQL injection attack detection and prevention. In 2017 IFIP/IEEE Symposium on Integrated Network and Service Management (IM) (pp. 1087-1090). IEEE.',NULL,1),(320,'ATT NRSC','ALTT16','Zero-Day Exploits','Attackers can exploit unknown vulnerabilities in the IoT actuator\'s software, allowing them to gain unauthorized access or to cause it to malfunction.','Stellios, I., Kotzanikolaou, P. and Psarakis, M., 2019. Advanced persistent threats and zero-day exploits in industrial Internet of Things. Security and Privacy Trends in the Industrial Internet of Things, pp.47-68.',NULL,1),(321,'ATT','HTT11','Counterfeit Components','IoT actuators may be compromised if counterfeit components are used during manufacture, which can result in security vulnerabilities or other issues.','Negka, L., Gketsios, G., Anagnostopoulos, N.A., Spathoulas, G., Kakarountas, A. and Katzenbeisser, S., 2019, May. Employing blockchain and physical unclonable functions for counterfeit IoT devices detection. In Proceedings of the International Conference on Omni-Layer Intelligent Systems (pp. 172-178).',NULL,2),(322,'ATT','HTT12','Cyberattacks','Cyberattacks pose a significant threat to IoT actuators. Because IoT actuators are typically connected to the internet and other devices, they can be vulnerable to a wide range of cyber threats, including hacking, malware, and denial-of-service attacks. If an attacker gains access to an IoT actuator, they may be able to control its behavior, alter its settings, or even cause it to malfunction or shut down completely. This could have serious consequences, especially if the actuator is being used to control critical infrastructure or other important systems. To mitigate the risk of cyberattacks, it is important to implement strong security measures, such as using encryption and authentication protocols, regularly updating software and firmware, and monitoring network traffic for signs of suspicious activity. Additionally, it is important to train users and administrators on best practices for cybersecurity and to have a plan in place for responding to cyber incidents.','Stellios, I., Kotzanikolaou, P., Psarakis, M., Alcaraz, C. and Lopez, J., 2018. A survey of iot-enabled cyberattacks: Assessing attack paths to critical infrastructures and services. IEEE Communications Surveys & Tutorials, 20(4), pp.3453-3495.',NULL,2),(323,'ATT','HTT13','Power Surges','Power surges can pose a threat to IoT actuators because they can damage or destroy the electronic components of the actuator. A power surge occurs when the voltage in an electrical circuit spikes above its normal level, which can happen due to lightning strikes, power outages, or other electrical disturbances. If an IoT actuator is not properly protected against power surges, a power surge could cause it to malfunction or become inoperable. To mitigate the risk of power surges, it is important to install surge protectors or uninterruptible power supplies (UPS) that can regulate and stabilize the voltage of the electrical circuit. Additionally, it is important to ensure that the IoT actuator is properly grounded and that all electrical connections are secure and well-maintained. By taking these steps, you can help to protect your IoT actuators from the damaging effects of power surges.','Antić, B., Bulat, M., Pejić, D., Gotovac, Z. and Mitrović, Z., 2023. Batteryless IoT module for sensing and signaling failures of passive power accessories. Microprocessors and Microsystems, 98, p.104809.',NULL,2),(324,'ATT ODRSC','HTT14','Side-Channel Attacks','Side-channel attacks are a type of cyber attack that exploit weaknesses in a system\'s physical or electromagnetic emissions to extract sensitive information. In the context of IoT actuators, side-channel attacks can be a serious threat because they can be used to extract cryptographic keys or other sensitive information used to secure the system. For example, an attacker may use a power analysis attack to extract a secret key used to encrypt data transmitted by an IoT actuator. To mitigate this threat, it is important to implement strong cryptographic measures that are resistant to side-channel attacks, such as using randomized algorithms and implementing countermeasures like masking and blinding. In addition, physical security measures can be used to prevent attackers from gaining access to the device and its emissions, such as tamper-resistant packaging and secure storage.','Devi, M. and Majumder, A., 2021. Side-channel attack in Internet of Things: A survey. In Applications of Internet of Things: Proceedings of ICCCIOT 2020 (pp. 213-222). Springer Singapore.',NULL,2),(325,'ATT','HTT15','Supply Chain Attacks','Supply chain attacks are a type of cyber attack that targets the supply chain of a product or service. In the context of IoT actuators, supply chain attacks can be a serious threat because they can compromise the integrity of the components used in the actuators, thereby compromising the security and functionality of the entire system. For example, an attacker may compromise a supplier\'s manufacturing process to introduce a backdoor into the firmware of an IoT actuator, which could be used to gain unauthorized access to the system. To mitigate this threat, it is important to implement strong supply chain security measures, such as vetting suppliers and ensuring that they follow secure manufacturing processes. In addition, regular security audits of the IoT system can help detect any vulnerabilities or suspicious activity that may indicate a supply chain attack.','Omitola, T. and Wills, G., 2018. Towards mapping the security challenges of the Internet of Things (IoT) supply chain. Procedia Computer Science, 126, pp.441-450.',NULL,2),(326,'ATT','NLTT38','Packet Sniffing','Packet sniffing is a technique used to intercept and monitor network traffic. It can be a serious threat to IoT actuators because it allows an attacker to capture and analyze the data being sent between the actuators and other devices on the network. By doing so, the attacker can potentially gain access to sensitive information, such as login credentials or other data that could be used to compromise the security of the IoT system. In addition, packet sniffing can also be used to inject malicious packets into the network, which could cause the IoT actuators to malfunction or behave in unexpected ways. To mitigate this threat, it is important to use encryption and secure communication protocols to protect the data being transmitted between IoT devices.','Liu, X., Zeng, Q., Du, X., Valluru, S.L., Fu, C., Fu, X. and Luo, B., 2021, October. Sniffmislead: Non-intrusive privacy protection against wireless packet sniffers in smart homes. In Proceedings of the 24th International Symposium on Research in Attacks, Intrusions and Defenses (pp. 33-47).',NULL,3),(327,'DVC TAG SSR ATT ODRSC','NTT6','Landslides','Landslides can pose a threat to IoT actuators in a few ways. First, if an IoT actuator is installed in an area that is at risk of landslides, the physical infrastructure supporting the actuator could be damaged or destroyed by the landslide. This could cause the actuator to malfunction or become inoperable. Second, if the landslide causes a power outage, the IoT actuator may not be able to function due to a lack of power. Finally, if the landslide damages the network infrastructure that the IoT actuator relies on to communicate with other devices, the actuator may not be able to transmit data or receive commands. All of these factors could potentially impact the effectiveness and reliability of IoT actuators in landslide-prone areas.','Oguz, E.A., Robinson, K., Depina, I. and Thakur, V., 2019, December. IoT-based strategies for risk management of rainfall-induced landslides: a review. In Proceedings of the 7th International Symposium on Geotechnical Safety and Risk (ISGSR 2019), Taipei, Taiwan (pp. 11-13).',NULL,4),(328,'DVC TAG SSR ATT ODRSC','NTT7','Lightning Strikes','Lightning strikes can be a potential threat to IoT actuators. When a lightning strike occurs, it can generate a high voltage surge that can damage the electronic components of an IoT actuator, such as the controller, power supply, and communication interface. This can lead to the failure of the actuator and potentially cause safety hazards or financial losses. To mitigate this risk, it is recommended to install surge protectors or lightning arresters between the IoT actuator and the power source or communication network. These devices can help to divert the high voltage surge away from the actuator and protect it from damage. Additionally, it is important to regularly inspect and maintain the surge protection devices to ensure their effectiveness.','Mialdea-Flor, I., Segura-Garcia, J., Felici-Castell, S., Garcia-Pineda, M., Alcaraz-Calero, J.M. and Navarro-Camba, E., 2019. Development of a low-cost IoT system for lightning strike detection and location. Electronics, 8(12), p.1512.',NULL,4),(329,'DVC TAG SSR ATT ODRSC','NTT8','Tornadoes','Tornadoes can also be a potential threat to IoT actuators. Tornadoes can generate strong winds and debris that can damage or destroy IoT devices and their associated infrastructure, such as power lines and communication networks. In addition, tornadoes can also cause power outages, which can disrupt the operation of IoT devices that rely on electricity. To mitigate the impact of tornadoes on IoT devices, it is important to consider the location and installation of the devices, as well as the use of backup power sources and robust communication networks.','Liu, Y., Wang, K., Qian, K., Du, M. and Guo, S., 2019. Tornado: Enabling blockchain in heterogeneous Internet of Things through a space-structured approach. IEEE Internet of Things Journal, 7(2), pp.1273-1286.',NULL,4),(330,'ATT','PLTT18','Theft','Theft can be a significant threat to IoT actuators as they are often used to control physical devices or machinery. If an attacker gains access to an IoT actuator, they can manipulate it to cause damage or steal valuable equipment. For example, an attacker could use a compromised actuator to shut down a production line or cause a malfunction in a critical system, leading to significant financial losses. Additionally, if the actuator is stolen, it can be reprogrammed and used for malicious purposes, such as controlling other IoT devices or launching cyber attacks. To mitigate this threat, it\'s essential to secure IoT actuators physically and ensure that they are only accessible to authorized personnel. This can be done by implementing access controls, monitoring usage, and installing security cameras or alarms.','Chandrappa, D.R., Pavan, H.R., Sagar, M.V. and Dakshayini, M., 2018, March. Iot security solution to avoid theft. In 2018 International Conference on Wireless Communications, Signal Processing and Networking (WiSPNET) (pp. 1-3). IEEE.',NULL,5),(331,'NRSC','ALTT17','Cross-site scripting attacks','Cross-site scripting (XSS) attacks can be a threat to IoT network resources. XSS attacks occur when an attacker injects malicious code into a web page viewed by another user, usually by exploiting a vulnerability in the website\'s code. When the victim views the page, the malicious code is executed, allowing the attacker to steal sensitive information or take control of the victim\'s device. In the context of IoT, XSS attacks can occur when web interfaces used to control IoT devices are vulnerable to injection attacks. Attackers can inject malicious code into these interfaces, allowing them to take control of the device or steal sensitive information. To mitigate this threat, IoT developers should ensure that web interfaces are designed with security in mind and that input validation is performed to prevent injection attacks. Additionally, users should be educated on the risks of clicking on suspicious links or downloading files from untrusted sources.','Grossman, J., Fogie, S., Hansen, R., Rager, A. and Petkov, P.D., 2007. XSS attacks: cross site scripting exploits and defense. Syngress.',NULL,1),(332,'NRSC','HTT16','Component Failure','Component failure is one of the most common threats to IoT network resources. This refers to the failure of hardware components such as sensors, actuators, microcontrollers, and other electronic components that are used in IoT devices. Component failure can occur due to a variety of reasons, including manufacturing defects, wear and tear, environmental factors, and power surges. When a component fails, it can cause the entire IoT device or network to malfunction, leading to data loss, reduced performance, and even complete failure. To mitigate the risk of component failure, IoT developers should use high-quality components, perform rigorous testing, and have contingency plans in place to quickly replace or repair failed devices. Additionally, organizations should regularly test and maintain their IoT devices to ensure they are functioning properly and can handle the demands of their network.','Oteafy, S.M. and Hassanein, H.S., 2016. Resilient IoT architectures over dynamic sensor networks with adaptive components. IEEE Internet of Things Journal, 4(2), pp.474-483.',NULL,2),(333,'NRSC','HTT17','Firmware Vulnerabilities','Firmware vulnerabilities can pose a significant threat to IoT network resources. Firmware is the software that is embedded in the IoT device\'s hardware, and it controls the device\'s functionality. If the firmware has vulnerabilities, it can be exploited by attackers to gain unauthorized access to the device, steal data, or use the device as a launching pad to attack other devices on the network. These vulnerabilities can arise from coding errors, design flaws, or failure to apply security patches and updates. Attackers can exploit these vulnerabilities by reverse engineering the firmware or using known exploits to gain access to the device. Once they gain access, they can modify the firmware to take control of the device, steal data, or launch attacks on other devices on the network. To mitigate the risk of firmware vulnerabilities, IoT developers should follow secure coding practices, perform regular security testing, and apply security patches and updates promptly. Additionally, IoT devices should be designed with secure boot mechanisms to ensure that only authorized firmware can be loaded onto the device. Organizations should also have a process in place to quickly identify and respond to firmware vulnerabilities to minimize the risk of exploitation.','Arakadakis, K., Charalampidis, P., Makrogiannakis, A. and Fragkiadakis, A., 2021. Firmware over-the-air programming techniques for IoT networks-a survey. ACM Computing Surveys (CSUR), 54(9), pp.1-36.',NULL,2),(334,'NRSC','HTT18','Hardware Failure','Hardware failure is a common threat to IoT network resources. It can occur due to various reasons, such as manufacturing defects, wear and tear, and environmental factors. When hardware fails, it can cause IoT devices to malfunction, leading to data loss, reduced performance, and even complete failure. For example, if a sensor or other IoT device fails to communicate with the network due to hardware failure, it can cause a disruption in the data flow, leading to incorrect or missing information. Similarly, if a device\'s power supply or battery fails, it can cause the device to shut down, leading to data loss or other issues. To mitigate the risk of hardware failure, IoT developers should design devices with high-quality components and perform rigorous testing to ensure their reliability. Additionally, organizations should have contingency plans in place to quickly replace or repair failed devices to minimize disruptions to the network.','Abed, S.E., Jaffal, R. and Mohd, B.J., 2023. A Review on Blockchain and IoT Integration from Energy, Security and Hardware Perspectives. Wireless Personal Communications, 129(3), pp.2079-2122.',NULL,2),(335,'NRSC','HTT19','Power Supply Failure','Power supply failure is a significant threat to IoT network resources. IoT devices rely on a stable and reliable power source to function correctly. Power supply failure can lead to data loss, reduced performance, and even complete device failure. In some cases, power supply failure can also damage the hardware components of IoT devices, leading to costly repairs or replacements. To mitigate this threat, IoT developers should design devices with appropriate power management and backup systems. For example, devices can be designed to switch to battery power in the event of a power outage or use redundant power supplies to ensure continuity of service. Additionally, organizations should regularly test and maintain their power infrastructure to ensure it is reliable and can handle the demands of their IoT devices. They should also have contingency plans in place to quickly replace or repair failed power supplies to minimize disruptions to the network.','Yadav, E.P., Mittal, E.A. and Yadav, H., 2018, February. IoT: Challenges and issues in indian perspective. In 2018 3rd International Conference On Internet of Things: Smart Innovation and Usages (IoT-SIU) (pp. 1-5). IEEE.',NULL,2),(338,'NRSC','NLTT39','Packet Sniffing','Packet sniffing is a type of cyber attack that involves intercepting and analyzing network traffic to gain unauthorized access to sensitive information. In the context of IoT networks, packet sniffing can be used to intercept and analyze the communication between IoT devices and the network, allowing attackers to gain access to sensitive data, such as login credentials, personal information, and other confidential data. Packet sniffing can be particularly dangerous for IoT networks because many IoT devices are designed to send data over unencrypted channels, making them vulnerable to interception and analysis. To mitigate the risk of packet sniffing, IoT developers should use secure communication protocols, such as SSL/TLS, to encrypt data in transit. Additionally, organizations should regularly monitor their network traffic for signs of packet sniffing and other cyber attacks and have contingency plans in place to quickly respond to any security incidents.','Diyeb, I.A.I., Saif, A. and Al-Shaibany, N.A., 2018. Ethical network surveillance using packet sniffing tools: A comparative study. International Journal of Computer Network and Information Security, 11(7), p.12.',NULL,3),(341,'NRSC ODRSC SSR TAG ATT','NTT9','Extreme Temperatures','Extreme temperatures can be a threat to IoT network resources. IoT devices may not be designed to operate in extreme temperatures, and exposure to high or low temperatures can cause device malfunction or failure. For example, high temperatures can cause electronic components to overheat and fail, while low temperatures can cause battery life to shorten or devices to freeze up. To mitigate this risk, IoT devices should be designed to operate within a specific range of temperatures, and organizations should ensure that devices are not exposed to extreme temperatures outside of this range. Additionally, devices can be housed in protective enclosures or placed in temperature-controlled environments to minimize the risk of temperature-related damage.','Ikpehai, A., Adebisi, B., Rabie, K.M., Anoh, K., Ande, R.E., Hammoudeh, M., Gacanin, H. and Mbanaso, U.M., 2018. Low-power wide area network technologies for Internet-of-Things: A comparative review. IEEE Internet of Things Journal, 6(2), pp.2225-2240.',NULL,4),(342,'NRSC ODRSC SSR','PLTT20','Electromagnetic Interference (EMI)','Electromagnetic interference (EMI) is a type of interference that can occur in IoT networks when electromagnetic waves from one device interfere with the operation of another device. This interference can cause data corruption, data loss, and other issues that can impact the reliability and performance of IoT networks. EMI can be caused by a variety of sources, including power lines, motors, and other electronic devices. To mitigate the risk of EMI in IoT networks, it is important to design devices and networks with appropriate shielding and grounding to minimize the impact of electromagnetic waves. Additionally, IoT devices should be tested to ensure that they are not emitting excessive electromagnetic radiation that could interfere with other devices. Finally, IoT networks should be designed with redundancy and failover mechanisms to ensure that data can be rerouted in the event of interference or other disruptions to network functionality.','Smolenski, R., 2012. Conducted electromagnetic interference (EMI) in smart grids. Springer Science & Business Media.',NULL,5),(343,'DVC TAG SSR ATT NRSC','PLTT19','Vibration and Shock','Vibration and shock can be a significant threat to IoT network resources, especially for devices that are deployed in harsh environments or are subject to frequent movement or impact. Vibrations and shocks can cause physical damage to the hardware components of IoT devices, leading to malfunction or failure. For example, excessive vibration can cause components to loosen or detach, leading to electrical shorts or other issues. To mitigate this threat, IoT developers should design devices with appropriate shock and vibration resistance and perform rigorous testing to ensure their reliability. They should also consider using shock-absorbing materials and techniques to protect sensitive components from damage. Additionally, organizations should regularly inspect and maintain IoT devices to ensure they remain in good working condition and replace any damaged devices promptly.','Khademi, A., Raji, F. and Sadeghi, M., 2019, April. IoT enabled vibration monitoring toward smart maintenance. In 2019 3rd International Conference on Internet of Things and Applications (IoT) (pp. 1-6). IEEE.',NULL,5),(344,'ODRSC','ALTT18','Buffer overflow attacks','Buffer overflow attacks can occur when an application receives more data than it is designed to handle, which can lead to crashes and compromised functionality of IoT devices.','Tushir, B., Dalal, Y., Dezfouli, B. and Liu, Y., 2020. A quantitative study of ddos and e-ddos attacks on wifi smart home devices. IEEE Internet of Things Journal, 8(8), pp.6282-6292.',NULL,1),(345,'ODRSC','ALTT19','Memory leaks','Memory leaks occur when a program or application does not release memory that is no longer needed, causing the device to run out of memory over time. This can be a significant threat to IoT on-device resources because it can cause the device to slow down or crash, leading to data loss or other issues. In an IoT context, memory leaks can be particularly problematic because many IoT devices have limited memory resources to begin with. If a memory leak goes undetected, it can lead to the device becoming unresponsive or even completely inoperable. To mitigate this risk, IoT developers should implement memory management techniques to ensure that memory is properly allocated and released as needed. Additionally, regular testing and monitoring can help identify and address any memory leaks before they cause significant issues.','Carter, J., Mancoridis, S. and Galinkin, E., 2022, April. Fast, lightweight IoT anomaly detection using feature pruning and PCA. In Proceedings of the 37th ACM/SIGAPP Symposium on Applied Computing (pp. 133-138).',NULL,1),(346,'ODRSC','HTT20','Firmware attacks','Firmware attacks are a type of cyber attack that targets the firmware of an IoT device. Firmware is the software that is embedded in the hardware of a device, and it controls the device\'s functions. Firmware attacks can compromise the security of an IoT device by exploiting vulnerabilities in the firmware. In the context of IoT on-device resources, firmware attacks can be used to gain unauthorized access to the device\'s resources, modify its behavior, or extract sensitive information. For example, an attacker could use a firmware attack to disable security features on an IoT device, allowing them to access its data or use it as a platform for launching further attacks. To mitigate the risk of firmware attacks, it is important to ensure that IoT devices are running the latest firmware version and to implement security measures such as encryption, access control, and identity authentication. Additionally, regular firmware updates and vulnerability assessments can help to identify and address potential security issues before they can be exploited.','Bettayeb, M., Nasir, Q. and Talib, M.A., 2019, March. Firmware update attacks and security for IoT devices: Survey. In Proceedings of the ArabWIC 6th Annual International Conference Research Track (pp. 1-6).',NULL,2),(347,'ODRSC','HTT21','Hardware Failure','Hardware failure is a significant threat to IoT on-device resources because it can result in the loss or corruption of data and damage to the hardware itself. Hardware failure can occur due to a variety of reasons, such as overheating, power surges, and physical damage. When hardware fails, it can cause the IoT device to stop functioning properly, which can impact the functionality of the entire IoT system. To mitigate the risks of hardware failure, IoT devices should be designed with high-quality components and undergo rigorous testing to ensure their reliability. Additionally, backup power sources and redundancy measures can help ensure that IoT devices continue to function even in the event of hardware failure.','Sánchez, P.M.S., Valero, J.M.J., Celdrán, A.H., Bovet, G., Pérez, M.G. and Pérez, G.M., 2021. A survey on device behavior fingerprinting: Data sources, techniques, application scenarios, and datasets. IEEE Communications Surveys & Tutorials, 23(2), pp.1048-1077.',NULL,2),(348,'ODRSC','HTT22','Supply chain attacks','Supply chain attacks are a type of cyber attack that targets the supply chain of a product or service. In the context of IoT devices, a supply chain attack can occur when a malicious actor infiltrates the supply chain of a device and introduces malicious code or hardware into the device during the manufacturing process. This can result in compromised security of the device and the on-device resources, including data and processing power. For example, a supply chain attack on an IoT sensor used in supply chain management could compromise the integrity of the data collected by the sensor, leading to incorrect decisions being made based on the compromised data. To mitigate the risk of supply chain attacks, it is important to ensure that all components of an IoT device are sourced from trusted suppliers and to implement robust security measures, such as encryption and access control, to protect against unauthorized access to on-device resources.',' K., Forte, D. and Tehranipoor, M.M., 2015, November. Protecting endpoint devices in IoT supply chain. In 2015 IEEE/ACM International Conference on Computer-Aided Design (ICCAD) (pp. 351-356). IEEE.',NULL,2),(349,'ODRSC','NLTT40','Rogue access points','Rogue access points are unauthorized wireless access points that are installed on a network without the knowledge or approval of the network administrator. These access points can be used to intercept and manipulate data traffic, and can pose a significant threat to the security of IoT devices that rely on wireless connectivity. When a rogue access point is installed on a network, it can potentially compromise the security of any IoT devices that are connected to that network. This is because rogue access points can intercept and manipulate data traffic, which can lead to unauthorized access to sensitive data, such as login credentials, financial information, and personal information. In addition to compromising the security of IoT devices, rogue access points can also consume on-device resources, such as battery life and processing power. This can lead to reduced performance and shorter battery life for IoT devices, which can negatively impact their functionality and usability. To mitigate the threat of rogue access points, IoT devices should be designed with robust security features that can detect and prevent unauthorized access to the device and its data. Additionally, network administrators should implement strict access controls and monitoring protocols to detect and remove rogue access points from the network.','Cox, J.H., Clark, R. and Owen, H., 2017. Leveraging SDN and WebRTC for rogue access point security. IEEE Transactions on Network and Service Management, 14(3), pp.756-770.',NULL,3),(351,'ODRSC','NTT11','Wildlife','Wildlife can pose a threat to IoT on-device resources, especially in outdoor environments. For example, animals such as birds, rodents, and insects can damage IoT devices by chewing through cables, nesting inside the devices, or causing physical damage to the hardware. This can result in the loss of data, disruption of communication between devices, and even complete failure of the IoT system. To mitigate the risks of wildlife damage to IoT devices, organizations can take several steps. For example, they can use protective covers or enclosures to prevent animals from accessing the devices. Additionally, regular maintenance and inspections can help identify and address any issues before they cause significant damage. Finally, organizations can consider using more robust and durable IoT devices that are specifically designed to withstand harsh outdoor environments.','Hawkins, P., 2004. Bio-logging and animal welfare: practical refinements.',NULL,4),(352,'ODRSC','NTT12','Power Supply Disruption','Power supply disruption can be a threat to IoT device resources. IoT devices rely on a stable power supply to function properly, and a disruption in the power supply can cause a variety of issues, including data loss, system crashes, and damage to hardware components. In the context of on-device resources, power supply disruption can cause the device to lose power and shut down, potentially leading to data loss or corruption. Additionally, power supply disruption can cause the device to reboot repeatedly, leading to increased wear and tear on hardware components and potentially shortening the lifespan of the device. To mitigate the risk of power supply disruption, it is important to ensure that IoT devices are properly installed and configured with backup power sources, such as batteries or uninterruptible power supplies (UPS). It is also important to regularly monitor the power supply and implement measures to reduce power consumption, such as optimizing software and hardware settings. In the event of a power supply disruption, it is important to have a plan in place to quickly restore power and minimize the impact on device resources.','Kimani, K., Oduol, V. and Langat, K., 2019. Cyber security challenges for IoT-based smart grid networks. International journal of critical infrastructure protection, 25, pp.36-49.',NULL,4),(353,'SSR','ALTT20','Injection Attacks','Injection attacks are a common type of cyber attack that can pose a serious threat to IoT applications. In an injection attack, an attacker sends malicious code or commands to an application with the goal of exploiting vulnerabilities and gaining unauthorized access to the system.  There are several types of injection attacks, including SQL injection, command injection, and cross-site scripting (XSS) attacks. In SQL injection, an attacker inserts malicious code into an SQL query, which can allow them to view, modify, or delete data from a database. In command injection, an attacker inserts malicious code into a command that is executed by the system, which can allow them to execute arbitrary commands on the system. In XSS attacks, an attacker injects malicious code into a web page, which can allow them to steal user credentials or perform other malicious actions. Injection attacks can be particularly dangerous for IoT applications, as they can allow an attacker to take control of a device or sensor and potentially cause physical harm. For example, an attacker could inject malicious code into a temperature sensor, causing it to report false readings and potentially leading to damage or safety hazards. To prevent injection attacks, it is important to implement proper input validation and sanitization techniques, as well as to use secure coding practices such as parameterized queries and prepared statements. Additionally, regular security testing and vulnerability assessments can help to identify and address potential vulnerabilities before they can be exploited by attackers.','Gangolli, A., Mahmoud, Q.H. and Azim, A., 2022. A systematic review of fault injection attacks on IOT systems. Electronics, 11(13), p.2023.',NULL,1),(355,'SSR','HTT23','Design Flaws','Design flaws refer to weaknesses or vulnerabilities in the design of a system or device that can be exploited by attackers to compromise the security or functionality of the system. In the context of IoT applications, design flaws can pose a significant threat to the security and privacy of devices, as well as the data they collect and transmit. Design flaws can occur at various stages of the development process, from the initial design phase to the implementation and deployment of the system. For example, a design flaw in the hardware or software of a device could allow an attacker to gain unauthorized access to the device or its data, or to manipulate the device in unintended ways. To mitigate the threat of design flaws in IoT applications, it is important to conduct thorough security assessments and testing throughout the development process. This includes identifying potential vulnerabilities and implementing appropriate security measures to address them. Additionally, ongoing monitoring and updates to the system can help to detect and address any new vulnerabilities that may arise over time.','Janes, B., Crawford, H. and OConnor, T.J., 2020, May. Never ending story: authentication and access control design flaws in shared IoT devices. In 2020 IEEE Security and Privacy Workshops (SPW) (pp. 104-109). IEEE.',NULL,2),(356,'SSR','HTT24','Firmware Vulnerabilities','Firmware vulnerabilities are a common threat to IoT sensors. Firmware is the software that is embedded in the hardware of the sensor and controls its operation. If the firmware is not secure, it can be vulnerable to attacks that can compromise the sensor\'s functionality and the data it collects. Hackers can exploit firmware vulnerabilities to gain unauthorized access to the sensor, modify its behavior, or steal sensitive data. To address this threat, it is important to ensure that firmware is developed using secure coding practices and is regularly updated to patch any known vulnerabilities. Additionally, sensors should be designed with secure boot and firmware update mechanisms to prevent unauthorized modifications.','Xie, W., Jiang, Y., Tang, Y., Ding, N. and Gao, Y., 2017, December. Vulnerability detection in iot firmware: A survey. In 2017 IEEE 23rd International conference on parallel and distributed systems (ICPADS) (pp. 769-772). IEEE.',NULL,2),(357,'SSR','HTT25','Memory Corruption','Memory corruption is a type of threat that can affect IoT sensors. In this context, memory corruption refers to the manipulation of the memory of an IoT sensor in a way that it can be exploited by attackers. An attacker can exploit memory corruption vulnerabilities in IoT sensors to compromise the sensor\'s security, steal sensitive data, or take control of the device. Memory corruption can occur in many ways, but one common method is through buffer overflow attacks. In a buffer overflow attack, an attacker sends more data to a buffer than it can handle, causing the excess data to overwrite adjacent memory locations. This can lead to the execution of malicious code or the modification of critical data. Another type of memory corruption attack is the use of format string vulnerabilities. In this type of attack, an attacker can exploit a vulnerability in the way a program handles format strings to read or write to arbitrary memory locations. To mitigate the risk of memory corruption attacks on IoT sensors, it is important to apply security best practices when developing and deploying IoT devices. This includes using secure coding practices, such as input validation and error handling, and implementing proper memory management techniques. Additionally, regular security updates and patches should be applied to IoT devices to address any known vulnerabilities.','English, K.V., Obaidat, I. and Sridhar, M., 2019, June. Exploiting memory corruption vulnerabilities in connman for iot devices. In 2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN) (pp. 247-255). IEEE.',NULL,2),(358,'SSR','HTT26','Sensor Spoofing','Sensor spoofing is another type of threat to IoT sensors that involves an attacker creating a fake sensor or manipulating the data from a legitimate sensor in order to deceive the system. This can be done in a number of ways, such as by using a device that mimics the behavior of a real sensor, or by intercepting and altering the data from a legitimate sensor. The goal of sensor spoofing is to manipulate the system into taking actions that benefit the attacker, such as granting access to a restricted area or triggering a security alarm. For example, an attacker might create a fake temperature sensor that reports a high temperature in order to trigger a fire alarm and cause a building to be evacuated. Alternatively, an attacker might intercept the data from a legitimate sensor and alter it in order to make it appear as though a security breach has occurred, which could then be used to gain unauthorized access to a system. There are a number of different techniques that can be used to mitigate the risk of sensor spoofing in IoT systems. These include implementing strong authentication and encryption mechanisms to protect the data transmitted by sensors, using digital signatures to verify the authenticity of sensor data, and implementing anomaly detection algorithms to detect abnormal sensor behavior. Additionally, it is important to ensure that sensors are physically secure and protected against tampering, as this can help to prevent attackers from creating fake sensors or intercepting data from legitimate ones.','Hasan, M. and Mohan, S., 2019, November. Protecting actuators in safety-critical IoT systems from control spoofing attacks. In Proceedings of the 2nd International ACM Workshop on Security and Privacy for the Internet-of-Things (pp. 8-14).',NULL,2),(359,'SSR','HTT27','Side-Channel Attacks','Side-channel attacks are a type of security threat that can affect IoT sensors. These attacks involve analyzing the physical characteristics of a device, such as its power consumption or electromagnetic emissions, to extract sensitive information. For example, an attacker might use a side-channel attack to determine the secret key used for encryption on an IoT sensor. This can be a serious threat to the security of the sensor and the overall system it is a part of. To mitigate this threat, IoT designers can implement countermeasures such as power analysis-resistant designs, randomizing the power consumption of the device, or using differential power analysis-resistant encryption algorithms.','Devi, M. and Majumder, A., 2021. Side-channel attack in Internet of Things: A survey. In Applications of Internet of Things: Proceedings of ICCCIOT 2020 (pp. 213-222). Springer Singapore.',NULL,2),(360,'SSR','NLTT41','Packet Injection','Packet injection is a type of network layer threat to IoT sensors, where an attacker sends malicious packets into the network with the intention of disrupting or manipulating the communication between the IoT devices and the network. The attacker can inject packets with false information, modify existing packets, or even create completely new packets to send to the IoT sensors. This can lead to a range of security issues, such as unauthorized access to the IoT network, data theft, and denial-of-service attacks. To protect against packet injection attacks, it is important to implement strong network security measures, such as encryption, authentication, and access control. Additionally, regularly updating the firmware and software of IoT devices can help to address known vulnerabilities that can be exploited by attackers.','Karmakar, K.K., Varadharajan, V., Nepal, S. and Tupakula, U., 2020. SDN-enabled secure IoT architecture. IEEE Internet of Things Journal, 8(8), pp.6549-6564.',NULL,3),(361,'SSR','NLTT42','Packet Sniffing','Packet sniffing is a type of network security attack where an attacker intercepts and reads network traffic in order to steal sensitive information, such as login credentials, credit card numbers, or other confidential data. In the context of IoT sensors, packet sniffing can be a significant threat if an attacker is able to intercept and read the data transmitted by the sensors. This could result in the theft of sensitive information, such as personal or financial data, or the compromise of critical systems, such as industrial control systems or healthcare devices. To mitigate this threat, it is important to ensure that IoT sensors are protected with strong encryption and authentication mechanisms, such as SSL/TLS or AES encryption. Additionally, implementing a system to monitor the network traffic and detect any unusual activity can help to quickly identify and respond to any potential packet sniffing attacks.','Patel, B. and Shah, P., 2020. Simulation, modelling and packet sniffing facilities for IoT: A systematic analysis. International Journal of Electrical and Computer Engineering, 10(3), p.2755.',NULL,3),(362,'SSR','NLTT43','Rogue Devices','Rogue devices are another threat to IoT sensors. Rogue devices are unauthorized devices that connect to the same network as the sensors and can potentially compromise the security of the network. These devices can be used to launch attacks on the network or steal sensitive data. For example, a rogue device can masquerade as a legitimate sensor and send false data to the network, causing the network to make incorrect decisions based on the false data. To mitigate this threat, it is important to implement strong access control mechanisms and regularly monitor the network for unauthorized devices. Network segmentation can also be used to isolate IoT sensors from other devices on the network, reducing the attack surface for rogue devices. Additionally, sensors should be designed with secure communication protocols to prevent unauthorized access and data tampering.','Agyemang, J.O., Kponyo, J.J., Klogo, G.S. and Boateng, J.O., 2020. Lightweight rogue access point detection algorithm for WiFi-enabled Internet of Things (IoT) devices. Internet of Things, 11, p.100200.',NULL,3),(363,'NRSC ODRSC SSR TAG ATT','NTT13','Tsunamis','Tsunamis can pose a threat to IoT sensors in several ways. First, the physical destruction caused by a tsunami can damage or destroy IoT sensors, rendering them inoperable. Second, the flooding caused by a tsunami can damage the electrical components of IoT sensors, leading to malfunctions or failures. Third, the saltwater from a tsunami can corrode the sensors\' metal components, further reducing their lifespan. To mitigate these risks, it is important to install IoT sensors in secure locations that are less vulnerable to natural disasters, and to use materials that can withstand the harsh conditions associated with tsunamis. Additionally, it is important to have backup systems in place that can take over in the event that primary sensors are damaged or destroyed.','Nimbargi, S.R., Hadawale, S. and Ghodke, G., 2017, December. Tsunami alert & detection system using IoT: A survey. In 2017 International Conference on Big Data, IoT and Data Science (BID) (pp. 182-184). IEEE.',NULL,4),(364,'SSR','PLTT21','Power Outages','Power outages can be a significant threat to IoT sensors, as they rely on a constant source of power to function properly. If the power supply to the sensors is interrupted, they may stop collecting data, transmitting data, or performing other critical functions. This could result in a loss of critical data, such as environmental readings in a smart city or security data in a surveillance system. Additionally, power outages can also cause physical damage to the sensors, such as overheating or short-circuiting. To mitigate this threat, it is important to ensure that IoT sensors are equipped with backup power sources, such as batteries or generators. Regular maintenance and testing of these backup power sources can help to ensure that they are working properly when needed. Additionally, implementing a system to monitor the power supply to the sensors can help to detect and quickly respond to any power outages.','Al-Turjman, F. and Abujubbeh, M., 2019. IoT-enabled smart grid via SM: An overview. Future Generation Computer Systems, 96, pp.579-590.',NULL,5),(365,'SSR','PLTT22','Power Supply Manipulation','Power Supply Manipulation is a type of threat to IoT sensors that involves an attacker manipulating the power supply of a sensor in order to compromise its security or disrupt its functionality. This can be done in a number of ways, such as by injecting noise into the power supply, altering the voltage or current levels, or simply cutting off the power altogether. The goal of Power Supply Manipulation is to cause the sensor to behave in unexpected ways, or to extract sensitive information from it. For example, an attacker might manipulate the power supply of a temperature sensor in order to cause it to report false readings, which could then be used to trigger a fire alarm or other safety system. Alternatively, an attacker might use Power Supply Manipulation to extract cryptographic keys or other sensitive data from a sensor, which could then be used to compromise other parts of a system. There are a number of different techniques that can be used to mitigate the risk of Power Supply Manipulation in IoT sensors. These include using secure power supplies that are resistant to manipulation, implementing strong encryption and authentication mechanisms to protect sensitive data, and monitoring power consumption levels and other indicators to detect signs of tampering. Additionally, it is important to ensure that IoT sensors are physically secure and protected against unauthorized access, as this can help to prevent attackers from gaining access to the power supply in the first place.','Wang, K., Xiao, S., Ji, X., Yan, C., Li, C. and Xu, W., 2023, May. Volttack: Control IoT Devices by Manipulating Power Supply Voltage. In 2023 IEEE Symposium on Security and Privacy (SP) (pp. 1771-1788). IEEE Computer Society.',NULL,5),(366,'SSR','PLTT23','Radio Frequency (RF) Interference','Radio frequency (RF) interference is a type of electromagnetic interference (EMI) that can be a significant threat to IoT applications. RF interference occurs when unwanted radio frequency signals disrupt the normal operation of an electronic device or system. These signals may come from a variety of sources, including nearby electronic devices, power lines, and wireless transmissions. In IoT applications, RF interference can cause a range of problems, including lost connections, degraded performance, and even complete system failure. This is particularly problematic in applications where reliable and continuous connectivity is critical, such as in industrial automation, healthcare monitoring, and transportation systems. To mitigate the risk of RF interference, IoT devices and systems must be designed with appropriate shielding and filtering to reduce the impact of external RF signals. This may involve the use of specialized materials and components, as well as careful placement and grounding of devices. Additionally, it is important to thoroughly test IoT devices and systems in real-world environments to identify and address any potential sources of RF interference.','Gummadi, R., Wetherall, D., Greenstein, B. and Seshan, S., 2007. Understanding and mitigating the impact of RF interference on 802.11 networks. ACM SIGCOMM Computer Communication Review, 37(4), pp.385-396.',NULL,5),(374,'TAG','ALTT21','Application Vulnerabilities','Application vulnerabilities are another security threat to IoT tags, which refers to weaknesses or flaws in the software or firmware that runs on an IoT tag. Attackers can exploit these vulnerabilities to gain unauthorized access to the IoT tag or to the network to which it is connected. For example, an attacker could exploit a vulnerability in an IoT tag\'s firmware to gain access to sensitive data stored on the device or to take control of the device and use it to launch attacks on other devices or systems. To mitigate this threat, IoT tags should be designed with security in mind, and organizations should implement measures such as code reviews, penetration testing, and software updates to identify and address vulnerabilities. Additionally, organizations should implement access controls and network segmentation to limit the impact of a successful attack on an IoT tag.','Andrea, I., Chrysostomou, C. and Hadjichristofi, G., 2015, July. Internet of Things: Security vulnerabilities and challenges. In 2015 IEEE symposium on computers and communication (ISCC) (pp. 180-187). IEEE.',NULL,1),(375,'TAG','ALTT22','Brute-Force Attacks','attackers can use brute-force techniques to guess passwords or other authentication credentials, allowing them to gain unauthorized access or control of the system.','Stiawan, D., Idris, M., Malik, R.F., Nurmaini, S., Alsharif, N. and Budiarto, R., 2019. Investigating brute force attack patterns in IoT network. Journal of Electrical and Computer Engineering, 2019.',NULL,1),(376,'TAG','ALTT23','Data Breaches','Data breaches are a type of threat to IoT tags that involves the unauthorized access, theft, or disclosure of sensitive data that is stored or transmitted by IoT tags. This can include personally identifiable information (PII), financial data, or other sensitive information. Data breaches can occur due to a variety of factors, including vulnerabilities in IoT tag firmware or software, weak passwords, or social engineering attacks. To mitigate the risk of data breaches, it is important to implement robust security measures for IoT tags, such as using encryption to protect data in transit and at rest, implementing access controls to limit access to sensitive data, and regularly updating firmware and software to address known vulnerabilities. Additionally, it can be helpful to monitor IoT tags for any signs of suspicious activity, such as unusual data transfers or unauthorized access attempts.','Moganedi, S., 2018, June. Undetectable data breach in iot: Healthcare data at risk. In 17th European Conference on Cyber Warfare and Security (Vol. 2, p. 296).',NULL,1),(377,'TAG','ALTT24','Data Tampering','Data tampering is another security threat to IoT tags, which refers to the unauthorized modification of data stored on or transmitted by an IoT tag. Attackers can tamper with data to manipulate the behavior of IoT devices or to gain access to sensitive information. For example, an attacker could modify the data transmitted by an IoT tag to make it appear as though a shipment was delivered when it was not, or to change the temperature readings of a refrigerated container to cause spoilage of the contents. To mitigate this threat, organizations should implement measures such as encryption, digital signatures, and access controls to protect the integrity of data transmitted by IoT tags. Additionally, organizations should monitor IoT devices for unusual activity and implement measures such as firmware and software updates to address vulnerabilities that could be exploited by attackers.','Shrivastava, R.K., Mishra, S., Archana, V.E. and Hota, C., 2019, December. Preventing data tampering in IoT networks. In 2019 IEEE International Conference on Advanced Networks and Telecommunications Systems (ANTS) (pp. 1-6). IEEE.',NULL,1),(378,'TAG','ALTT25','Insider Threat','Insider threats refer to security risks posed by individuals who have authorized access to an organization\'s network or systems, such as employees, contractors, or partners. These individuals may intentionally or unintentionally misuse their access to sensitive data or systems, potentially compromising the security of IoT tags and other devices connected to the network. For example, an employee with access to an IoT tag\'s data may intentionally leak sensitive information to unauthorized parties, or they may inadvertently introduce malware onto the network by using an infected device to access the network. To mitigate insider threats, organizations should implement strong access controls, monitor network activity for suspicious behavior, and provide security awareness training to employees and other authorized users. Additionally, organizations should implement policies and procedures for reporting and responding to security incidents, including those involving insider threats.','Kim, A., Oh, J., Ryu, J. and Lee, K., 2020. A review of insider threat detection approaches with IoT perspective. IEEE Access, 8, pp.78847-78867.',NULL,1),(379,'TAG','ALTT26','Phishing Attacks','Phishing attacks are a type of social engineering attack that aims to trick people into divulging sensitive information, such as usernames, passwords, and credit card details. In the context of IoT tags, phishing attacks can be used to steal login credentials for IoT tag management systems or to trick users into downloading malware onto their devices. Once attackers have access to these systems or devices, they can modify or disable IoT tags, steal data, or launch further attacks. Phishing attacks can be particularly effective against IoT tags because they often rely on simple login credentials and may not have strong security controls in place. To mitigate this threat, it is important to educate users about the risks of phishing and to implement strong authentication mechanisms, such as two-factor authentication, to prevent unauthorized access to IoT tag management systems. Additionally, IoT tags should be designed with security in mind, with features such as secure boot, firmware updates, and encryption to protect against attacks.','Bhardwaj, A., Al-Turjman, F., Sapra, V., Kumar, M. and Stephan, T., 2021. Privacy-aware detection framework to mitigate new-age phishing attacks. Computers & Electrical Engineering, 96, p.107546.',NULL,1),(380,'TAG','ALTT27','SQL Injection','Attackers can inject malicious code into the IoT tag\'s database, allowing them to steal sensitive information or gain unauthorized access to systems.','Gowtham, M. and Pramod, H.B., 2021. Semantic query-featured ensemble learning model for SQL-injection attack detection in IoT-ecosystems. IEEE Transactions on Reliability, 71(2), pp.1057-1074.',NULL,1),(381,'TAG','ALTT28','Counterfeit Tags','Counterfeit tags are a type of threat to IoT tags that involves the creation and distribution of fake or imitation tags that mimic the appearance and functionality of legitimate IoT tags. These counterfeit tags can be used to infiltrate IoT systems and networks, allowing attackers to gain unauthorized access to sensitive data or to carry out other malicious activities. Counterfeit tags can also be used to undermine the integrity of supply chains by allowing counterfeit goods to be passed off as legitimate products. To mitigate the risk of counterfeit tags, it is important to use trusted vendors for IoT tags and to implement robust supply chain management practices. Additionally, it can be helpful to use authentication mechanisms to verify the authenticity of IoT tags and to monitor for any signs of tampering or counterfeiting.','Popović, T., Krčo, S., Maraš, V., Hakola, L., Radonjić, S., Van Kranenburg, R. and Šandi, S., 2021. A novel solution for counterfeit prevention in the wine industry based on IoT, smart tags, and crowd-sourced information. Internet of Things, 14, p.100375.',NULL,1),(382,'TAG','HTT28','Inadequate Encryption','Inadequate encryption can be a significant threat to IoT tags as it can leave the data transmitted by the tags vulnerable to interception and decryption by unauthorized parties. If the encryption used is weak or outdated, it can be easily bypassed, allowing attackers to access sensitive information like location data, inventory levels, and other critical data. This can lead to a breach of security, loss of data, and potential financial loss. Therefore, it\'s crucial to ensure that IoT tags use strong encryption methods and that they are regularly updated to prevent any potential security breaches.','Shrestha, R. and Kim, S., 2019. Integration of IoT with blockchain and homomorphic encryption: Challenging issues and opportunities. In Advances in computers (Vol. 115, pp. 293-331). Elsevier.',NULL,2),(384,'TAG','PLTT24','Power Drain','Power drain is a security threat to IoT tags, which refers to the depletion of the battery power of an IoT tag due to malicious activities or inefficient power management. When an IoT tag\'s battery is drained, it can no longer function as intended, which can result in a loss of data or a failure to track assets. Attackers can exploit vulnerabilities in IoT tags to drain their batteries by sending excessive requests, injecting malicious code, or using denial-of-service attacks. To mitigate this threat, IoT tags should be designed to use power efficiently, and organizations should implement measures such as access controls and firmware updates to protect against attacks. Additionally, organizations can use backup power sources or energy harvesting techniques to ensure that IoT tags continue to function even if their batteries are drained.','Sodhro, A.H., Pirbhulal, S., Luo, Z. and De Albuquerque, V.H.C., 2019. Towards an optimal resource management for IoT based Green and sustainable smart cities. Journal of Cleaner Production, 220, pp.1167-1179.',NULL,5),(385,'TAG','PLTT25','Power Outages','Power outages can be a threat to IoT tags because they rely on a steady source of power to function properly. If the power goes out, the tags may not be able to communicate with the network or perform their intended functions. This can cause a loss of data or even a complete failure of the IoT system. To mitigate this threat, it is important to ensure that the tags have backup power sources, such as batteries or generators, that can keep them running during power outages. Additionally, implementing power management strategies, such as reducing power consumption during periods of low activity, can help to prolong the life of the backup power sources and ensure that the tags remain operational for as long as possible.','Soltan, S., Mittal, P. and Poor, H.V., 2018. BlackIoT: IoT botnet of high wattage devices can disrupt the power grid. In 27th {USENIX} Security Symposium ({USENIX} Security 18) (pp. 15-32).',NULL,5),(386,'TAG','PLTT26','Signal Blocking','Signal blocking is a type of threat to IoT tags that occurs when the communication signals between the tag and the network are intentionally blocked or jammed. This can be done by an attacker using a jamming device or by simply physically obstructing the signal with materials such as metal or concrete. When the signal is blocked, the tag is unable to communicate with the network, which can result in a loss of data or even a complete failure of the IoT system. This type of threat can be mitigated by implementing security measures such as using multiple communication channels and ensuring that the tags have backup power sources.','Rusli, M.E., Ali, M., Jamil, N. and Din, M.M., 2016, July. An improved indoor positioning algorithm based on rssi-trilateration technique for internet of things (iot). In 2016 International Conference on Computer and Communication Engineering (ICCCE) (pp. 72-77). IEEE.',NULL,5),(387,'TAG','PLTT27','Tag Removal or Replacement','Tag removal is a type of physical attack that can be used to compromise the security of IoT tags. This involves physically removing the tag from the object it is attached to, which can allow an attacker to gain unauthorized access to the object or to the data stored on the tag. This type of attack is particularly concerning in situations where the tag is being used to secure valuable or sensitive items, such as in supply chain management or asset tracking. To mitigate this risk, IoT tags can be designed with tamper-evident features that make it difficult or impossible to remove the tag without damaging it or triggering an alarm. Additionally, tags can be paired with sensors that can detect when they have been removed from an object and alert security personnel to the potential threat.','AL MOGBIL, R., AL ASQAH, M. and EL KHEDIRI, S., 2020, September. Iot: Security challenges and issues of smart homes/cities. In 2020 International Conference on Computing and Information Technology (ICCIT-1441) (pp. 1-6). IEEE.',NULL,5);
/*!40000 ALTER TABLE `threat_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `threat_type_enum`
--

DROP TABLE IF EXISTS `threat_type_enum`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `threat_type_enum` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `acronym` varchar(10) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `threat_type_enum_acronym_uindex` (`acronym`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `threat_type_enum`
--

LOCK TABLES `threat_type_enum` WRITE;
/*!40000 ALTER TABLE `threat_type_enum` DISABLE KEYS */;
INSERT INTO `threat_type_enum` VALUES (1,'Application Layer Threat Type','ALTT'),(2,'Hardware Threat Type','HTT'),(3,'Network Layer Threat Type','NLTT'),(4,'Nature Threat Type','NTT'),(5,'Physical Layer Threat Type','PLTT');
/*!40000 ALTER TABLE `threat_type_enum` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2024-04-20 16:04:38
